1.关于泛型：
    1.Java是强数据类型语言，参数的类型需要在编译期间确定，但实际编码中为了提高代码的复用度降低代码量就需要将参数类型进行泛化，让同一个参数具有接收不同类型参数的能力，因此这种能够泛化参数类型，让参数类型在运行期间再确定的机制就是泛型；
    2.java中通过泛型参数实现泛型机制，java中可以为类、接口、方法声明一个泛型参数表示参数的类型，而泛型参数只需要在运行时指定即可，而且根据不同的需求可以传递不同的参数类型；

2.Java中泛型实现原理：
    1.Java中的泛型是借助面向对象中多态的特性来实现的，因为在多态特性中，子类也是一种特殊的父类类型，那么接收父类类型的参数同样也接收子类类型的值，那么父类型就可以兼容不同的子类类型；
    2.借助多态的特性，Java编译完成之后会将编码期间声明的泛型参数擦除，编译完成之后将不存在任何泛型参数信息，而是把泛型参数改为泛型参数的上限类型或者Object类型，然后向下兼容其不同的子类类型实现参数的泛化；
    3.在泛型擦除时，会检查当前泛型参数是否有同感extends设置泛型参数的上限类型：
        1.如果有设置上限，那么编译完成之后，该泛型参数全部被替换为泛型参数的上限类型；
        2.如果没有设置上限，那么编译完成之后，该泛型参数全部被替换为Object类型；
    4.根据Java中实现泛型的原理即可看到，Java中的泛型实际上是一个伪泛型，泛型允许的参数类型是有上限要求的，并不像python或者php一样的弱数据类型语言一样，能够让一个参数兼容不同的数据类型；

3.Java中泛型的限制：
    1.Java中的泛型是通过借助面向对象的多态特性实现的，所以泛型机制只能用在面向对象的场景中，适用于引用类型，不用用在基本数据类型中，对于有基本类型数据参与的场景需要先将其转换为包装类型；
    2.同样由于其是借助多态特性实现的，因此如果设置了泛型参数的上限，那么只能传递该泛型参数上限的子类类型，并不能兼容互不相关的参数类型

4.Java中泛型的特征：
    1.泛型擦除之后不会存在泛型参数信息，因此传递不同的类型的泛型参数并不会产生新的类型，一个接收泛型参数的类，无论传递何种类型的泛型参数，都不会产生新的类型，传递的数据类型只是一个标记而已；
    2.泛型擦除之后，为了参数转换时的类型安全，编译阶段会对传递至泛型实例的参数进行类型验证，但是这种验证只会对泛型实例的声明类型验证，不会对泛型实例的具体实例类型进行验证；
        //如下一个泛型类：
        class Gen <T>{
            public Gen(){}
            public void add(T t){}
        }
            
        //客户端代码:
        B b = new B();
        A a = new A();
        Gen<B> tb = new Gen<>();
        tb.add(b); // 编译通过
        tb.add(a); // 此时编译不会通过，
        //对于上述代码，在通过tb调用泛型方法add时，编译器会只会检查泛型方法中的泛型类型是否和调用方法时引用的泛型类型一致，由于tb在声明时已经指明泛型的类型信息；因此泛型方法中泛型的类型就是B类型，因此只能添加B类型的实例对象；

        Gen tn = new Gen<B>();
        tn.add(a); // 编译通过
        tn.add(b); // 编译通过
        //对于上述代码，通过tn调用add方法，同样编译器会检查泛型方法中的泛型类型是否和调用方法时引用的泛型类型一致，虽然tn实际指向的实例对象的泛型是B类型 ，但是声明引用tn时并未指定泛型的类型信息，其泛型的类型信息会被默认为Object,而泛型方法的泛型只和调用其的引用的泛型类型有关，因此泛型方法的泛型类型信息同样是Object，所以可以将任意类型的数据作为add方法的参数；
            会在编译完成之后被擦除，泛型参数该改成泛型参数的上限或者Object类型，这个过程称之为泛型擦除；
    3.泛型擦除之后，防止运行期间数据类型转换异常，不同泛型参数的同种引用类型直接不能互相赋值，即便泛型参数之间是父子关系也不行；如果必须如此，可以通过通配符实现；
5.泛型的声明：
    1.在接口中声明泛型参数：
        权限 interface 接口名<T>{/*接口成员*/}
        public interface InterfaceGenericity<T>{ 
            public T var;
        }

    2.在类中声明泛型参数：
        权限 修饰符 calss 类名<T>{\*类成员*/}
        public class ClassGenericity<T>{ 
            public T var;
        }
    
    3.方法中声明泛型：
        权限 修饰符 <T> 返回值类型 方法名(形参列表){/*方法体*/}
        public <T> void testFun(T a){
            T b;
        }

        public <T,K> void testFun(T a){
            T b;
            K e;
        }
    
    4.声明泛型时指定上限和下限：
        1.泛型上限：
            1.如果直接使用泛型，那么类型的范围太大，类型参数的值太随意，可以通过泛型上限约束泛型的范围；泛型上限表示当前泛型最高支持的数据类型，只能接受上限类型以及上限类型的子类；
            2.示例：
        ​		**1.对于类：**
        ​			权限 修饰符 class 类名<T extends ParentClass>{/*类成员*/}

        ​		**2.对于接口：**
        ​			权限 interface 接口名<T extends ParentClass>{/*接口成员*/}

        ​		**3.对于方法：**
        ​			权限 修饰符 <T extends ParentClass> 返回值类型 方法名(形参列表){/*类成员*/}
        2.泛型下限：
            1.表示当前泛型最低支持的数据类型，只能接受下限类型和下限类型的超类；
            2.示例：
        ​		**1.对于类：**
        ​                权限 修饰符 class 类名<T super ParentClass>{/*类成员*/}

        ​		**2.对于接口：**
        ​                权限 interface 接口名<T super ParentClass>{/*接口成员*/}

    ​           **3.对于方法：**
    ​                权限 修饰符 <T super ParentClass> 返回值类型 方法名(形参列表){/*类成员*/}
6.使用泛型：
    1.类使用泛型：
        1.创建实例对象时使用泛型：
            // *声明*对象引用类型时指定
            TestClass<String> ts = new TestClass<>();
        2.继承类时指定
            1.继承时能够明确要使用的泛型参数类型：
                class OtherClass extends TestClass<String>{};
            2.继承时无法明确要使用的泛型参数类型：
                class OtherClass<T> extends TestClass<T>{};
            3.子类直接忽略父类的泛型参数：
                class OtherClass extends TestClass{};
    2.接口使用泛型：
        1.继承时指定：
             1.继承时能够明确要使用的泛型参数类型：
                class OtherClass implements TestClass<String>{};
            2.继承时无法明确要使用的泛型参数类型：
                class OtherClass<T> implements TestClass<T>{};
            3.子类直接忽略父类的泛型参数：
                class OtherClass implements TestClass{};
    3.方法使用泛型：
        1.默认情况下，系统会根据传入方法的参数自动推断其数据类型；
        2.也可以手动显式的注明不同泛型参数表示的数据类型：method<type1,type2>(value1,value2),此时后面的实参必须和前面指定的泛型参数类型保持一致；

7.通配符：
    1.通配符是指在使用泛型类时，本该传入具体的泛型参数，但是当前又不确定应该传入何种类型，那么可以使用通配符，一般使用场景有两种：
        1.使用泛型类来声明实例对象；
        2.使用泛型类来在方法中声明形参；
    2.使用泛型类在方法中声明形参：
        1.如果在方法中使用了一个泛型类声明参数，但是当前方法暂不确定应当给泛型类何种类型的泛型参数时，可以使用通配符，起到一个暂时占位的作用，表示当前具体的泛型参数由方法的调用方给出；
        2.使用示例：
            // 对于以下泛型方法，表示方法的参数list泛型参数未知，由方法的调用方指定；调用方可以根据需要传递任意类型的List
            public void test(List<?> list){};

            // 比如传递String类型的List
            test(new ArrayList<String>());
            // 比如传递Integer类型的List
            test(new ArrayList<Integer>());
        3.通配符上下限：
            1.通配符也可以通过extends和super设置传入泛型参数的上限和下限；
            2.示例如下：
                // 通配符上限,设置了通配符上限之后，调用方仅能传递ClassGenericity以及子类类型的List；
                public void test(List<? extends ClassGenericity> list){};
                // 通配符下限,设置了通配符下限之后，调用方仅能传递ClassGenericity以及超类类型的List；
                public void test(List<? super ClassGenericity> list){};
    3.使用泛型类声明变量的场景：
        通配符用在变量声明时通常都是用在集合的声明中，需要遵守PECS规则，即Producer extends； Consumer super；生产者消使用extends，消费者使用super的意思；
        
        即:
​        1.可以从 <? extends Type> 声明的容器中获取数据，但是不能向其添加数据；

​        2.可以向 <? super Type> 声明的容器中添加数据；并且添加数据时也仅能添加Type及其子类类型，不能添加Type父类类型；