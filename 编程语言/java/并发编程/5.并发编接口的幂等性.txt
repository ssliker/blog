1.关于幂等性：
    1.幂等性是指一个接口同一种请求参数下，无论发起多少次请求，都要保持为第一次请求的处理结果；
    2.幂等性对于防止产生重复的数据或者重复的操作以保持数据和逻辑的一致性非常重要；
2.幂等性发生的场景：
    1.不是所以的场景都需要保持幂等性，如查询操作、删除操作，天然具有幂等性，无需额外的措施保证；
    2.但是对于新增类型的操作通常都是需要手动保证其幂等性，但是更新操作要区分情况，如果只是单纯的按照固定条件更新通常无需手动保证幂等性，如果在更新过程中会根据旧数据进行计算新的结果，那么就必须手动保证其幂等性；
3.发生幂等性问题的原因：
    无法保证幂等性的核心就是同一个操作却执行了多遍，导致这种问题的原因主要有以下几类场景：
        1.前后端交互项目，前端重复提交；
        2.接口互相调用类项目，超时/网络失败引起的重新调用；
        3.使用到消息队列时，消息重复消费；
    实际情况中，无论哪一种场景，都需要后端主动保证接口的幂等性；
4.解决幂等性的方法：
    1.解决幂等性的核心就在于 ·先检查后操作·：在执行操作之前先根据唯一标识检查是否已经执行过相关操作，如果已经执行过那么可以放弃执行或者改为执行其他操作；
    2.实际中采用的方案分为两大类：
        1.手动执行第一步的检查，然后执行后续操作：
            悲观锁方式：
                1.如果是单机部署，可以使用单机线程同步方案保证第一步的检查操作在并发执行时的线程安全；如：synchronized或者ReentrantLock；
                2.如果是集群部署方案：
                    1.使用数据库的排他锁
                    2.使用分布式锁
            乐观锁方式：
                1.如果是单机部署方案，可以使用java本身的CAS实现乐观锁；
                2.如果是集群部署方案，可以使用数据库+版本号/redis事务+监听机制实现乐观锁
            
        2.操作自身会执行检查，然后执行后续操作：
            1.借助数据库中主键、唯一索引字段的唯一性自动完成冲突性检查，这种方案适用于新增操作，唯一字段冲突时自然不会执行；
            2.借助状态字段作为更新条件，这种方案适用于数据有状态字段，且每次更新都会更新状态字段的更新操作，当状态字段不符合条件时自然不会执行；