1.线程并发执行时的线程安全问题：
    1.线程并发执行通常分为两种类型：
        1.多个线程执行同种任务，加快单个任务的执行效率；
        2.多个线程执行不同的任务，协作运行完成一个任务；
    2.线程并发执行时的问题：
        线程并发执行无论是第一种还是第二种，都有可能存在共享公共资源的场景；在多个线程共同访问共享资源时将会因为线程的切换方式导致原子性问题、线程的内存模型导致可见性问题、jvm的优化机制而导致有序性问题，这些问题统称为线程安全问题，具体如下：
        1.原子性问题：
            1.原子性导致一个线程把另一个线程计算结果覆盖掉的问题又称为更新丢失问题或者超卖问题，原因便是多个线程基于同一个变量值计算，那么后执行完成的线程将会覆盖掉先完成的线程对变量的更新结果。更深的原因有两个方面：线程的内存模型和cpu切换线程的方式；
            2.由于线程内存模型的原因，线程会先把共享变量从主内存复制到线程私有内存中计算，完成后将计算结果刷新至主内存，其他线程从主内存中读取结果时就可以读取到最新的执行结果；而cpu是通过为线程分配时间片来执行线程指令的，如果时间已到，那么cpu会立即切换到其他线程开始执行，而前一个线程如果还未将计算结果更新至主内存时，后一个线程又开始执行需要同步执行的代码，那么后一个线程从主内存中读取到的值将和前一个线程相同，两个线程将基于相同的变量值计算，后完成线程的计算结果将会覆盖先完成线程的计算结果。
        2.可见性问题：
            1.可见性导致一个线程无法看到另一个线程对共享变量的更新结果，如果共享变量被一个线程更新，被另一个线程读取用作条件判断，那么将可能出现永远也运行不到符合条件的逻辑中的问题；这个结果本质上是线程的内存模型导致的；
            2.java中的线程模型是这样设计的：
                1.所有的全局变量存储在主内存中，每一个线程还会有自己的私有内存；
                2.线程在访问全局变量时，需要先把全局变量的值复制到线程私有内存中，然后进行计算；
                3.线程在私有内存中计算完成之后再将更新结果刷新至主内存；
                4.其他线程如果是在线程刷新至主内存之后读取全局变量将会读取到最新值，如果是在线程刷新至主内存之前读取到的还是旧值；
        3.有序性问题：
            1.有序性是指指令的执行顺序是否按照编码的顺序执行，如果没有严格按照编码顺序执行，将可能导致某个线程更新两个变量的顺序不同，而其他线程又严格依赖于两个变量的更新顺序，将会导致其他线程执行出错；
            2.有序性问题的详细描述，如以下代码：
                共享变量：
                    boolean a = false;
                    int c = 2;
                    boolean b = false;
                线程1如果对指令优化之后按照以下顺序执行：
                    a = true;
                    b = true;
                    ----  线程1暂停，cpu切换  ----
                    c = 3;
                线程2访问共享变量b和c:
                    if(b==true) {
                        int tmp = c;
                    }
                类似上述情况，线程1本应该先初始化c，然后再更新b，但是指令重排序之后可能出现先初始化b，后初始化c，而b初始化完成之后cpu发生切换，导致c还未更新就被切换到线程2执行，此时b是true，而c却还是2，并不是最新值3；那么将导致本应该给tmp赋值为3的业务却被赋值为2，最终导致出错；
2.保证线程间原子性：
    1.关于原子性和原子指令：
        原子是最小且不可分割的，因此在程序中使用原子性表示一个最小的执行单元，作为最小的执行单元，理论上同一时刻只会有一个处理器执行该执行单元，并且一旦开始执行就必须完成或者发生异常之后终止；而且不能有多个处理器同时执行同一个具备原子性的执行单元；

        原子性指令就是值具有原子性特征的指令，最小且不可分割，符合原子性的两个特征：
            1.处理器在执行原子指令期间，只有原子指令执行完成或者发生异常才能结束；
            2.多个处理器不能同时执行同一个原子指令；
        
        原子性指令一定是单个指令，但是单个指令并不一定具备原子性，java中只有8个指令具备原子性，最常见的就是(除过long和double)的赋值操作；由多个指令组成的执行单元更不具备原子性；
    
    2.关于线程同步：
        1.线程并发执行时如果不能保证线程执行的指令具有原子性，将会导致超卖问题，但实际情况确实大多数指令以及由多个指令组成的执行单元并不具备原子性；
        2.为了保证线程执行的指令具有原子性，java中通过锁机制来实现，悲观锁如：synchronized和ReentrantLock，乐观锁如：CAS；
        3.在悲观锁的机制下，一个线程必须等到另一个线程释放了锁之后才能执行同步代码，否则只能处于阻塞等待状态，那么即便处理器在未执行完成当前线程指令之前发生切换，其他线程也无法执行同步代码，间接的保证了代码的原子性；
        4.在乐观锁机制下，多个线程可以同时执行同步代码，但只是用在共享变量的赋值中，在赋值之前先检测变量是否被其他线程更新，如果未被更新才赋值，否则直接返回失败；间接保证赋值操作的原子性
        5.线程间是否需要同步执行是由业务逻辑决定的，而指令的原子性是保证线程同步执行的实现方式；
    3.关于加锁：
        1.加锁的方式：
            1.通过synchronized加锁；
            2.通过ReentrantLock加锁；
        2.加锁保证线程同步的原理：
            1.对于需要保证同步执行的相同或者不同代码块需要使用同一把锁锁住；
            2.线程在执行被锁住的代码之前必须先获得该锁，只有获得锁的线程才能执行代码，而未获得锁的线程则不能执行代码，只能处于阻塞等待状态；
            3.直到持有锁的线程释放锁之后，其他等待该锁的线程才能继续竞争锁，竞争到锁的线程才能执行其需要执行的同步代码块，而未竞争到锁的线程则继续处于阻塞等待状态；
        3.关于Synchronized加锁：
            1.synchronized简介：
                1.synchronized是java提供的一个关键字，可以用来修饰方法或者代码块，使方法或者代码块成为同步方法和同步代码块；
            2.synchronized的使用：
                1.修饰静态方法：
                    public synchronized static void fun(){
                        // synchronized修饰静态方法
                    }
                2.修饰实例方法：
                    public synchronized void fun(){
                        // synchronized修饰实例方法
                    }
                3.修饰代码块：
                    public Object lock = new Object();
                    public void fun(){
                        synchronized(lock){
                            // synchronized修饰代码块
                        }
                    }
            3.关于synchronized加锁的本质：
                1.synchronized虽然用来修饰方法或者代码块，但实际上其是为锁对象加锁，而不是为代码加锁，线程在获取锁时也是获取锁对象的锁；
                2.synchronized在修饰代码块时需要显示指定一个锁对象，需要同步执行的代码块必须使用同一个锁对象；
                3.synchronized在修饰方法时虽然未显式指定锁对象，但其实际上锁住的仍然是对象，如果synchronized修饰的是静态方法，那么锁对象是该类的class对象，如果synchronized修饰的是实例方法，那么锁对象是调用该方法的实例对象；
            4.关于synchronized修饰方法和修饰代码块的区别：
                1.synchronized修饰方法时锁住的是整个方法，加锁粒度比较大，并发度较低；修饰代码块时锁住的是整个代码块，加锁粒度较小，并发度较高；
                2.synchronized修饰方法时，会在编译完成后将该方法的属性表中的synchronizedAccess设置为1，方法被调用时会先检测该属性是否为1，如果是则先获取锁，获取成功之后才能向下执行；
                3.synchronized修饰代码块时，在编译完成之后会生成一个moniterenter指令和两个moniterexit指令，moniterenter指令和第一个moniterexit指令相对应表示进入同步代码块和退出同步代码块，第二个moniterexit指令是为了保证同步代码块在发送异常之后能够释放锁对象，代码编译完成之后，会自动为同步代码块机上try...finally，并在finally中释放锁；
            5.synchronized加锁过程：
                在JDK1.6之前，synchronized使用系统的竟态条件mutex来实现锁的竞争，加锁时直接申请重量级锁，一旦没有获取到锁线程将立即进入阻塞等待状态，性能较差；
                在JDK1.7之后，优化了synchronized，有了锁升级的过程，升级方向为：偏向锁->轻量级锁->重量级锁；并且加入了锁消除、锁粗化机制，使得synchronized性能大幅提升；
            6.关于偏向锁：
                1.偏向锁的使用场景：
                    偏向锁解决了同一个线程需要反复加锁和释放锁的场景；
                2.关于偏向锁的加锁原理：
                3.偏向锁的释放锁原理：
            7.关于轻量级锁：
                1.轻量级锁的使用场景：
                    轻量级锁是为了解决存在线程之间的竞争，但是竞争并不激烈的场景；在发生竞争后，由于可能很快就会获取到锁，所以没必须直接挂起线程，而是让线程进入自旋，并在自旋中尝试获取锁，如果自旋超过一定次数之后再升级为重量级锁；
                2.轻量级加锁原理：
            8.关于重量级锁：
                1.重量级锁的使用场景：
                    重量级锁是为了解决线程之间存在大量竞争的场景；如果线程竞争比较激烈，那么让线程进入自旋反而浪费cpu资源，因此会直接挂起线程，等待被唤醒竞争锁；
                2.重量级锁的实现原理：
                    重量级锁通过mutix实现；
        4.关于Lock加锁：
            1.Lock加锁简介：
                1.Lock是基于AQS实现的一种加锁机制，通过CAS机制改变AQS中的state变量值来实现；
                2.Lock实现的锁按照对state变量的更新方式分为共享锁和独占锁，而独占锁又根据获取锁的方式可以分为公平锁和非公平锁；
                3.Lock除过可以阻塞式获取锁以外还提供了返回加锁结果，以及取消加锁等待等功能；
                4.Lock只能修饰代码块，不能修饰方法；
                5.ReentrantLock同样是一个可重入锁，支持锁的重入，每次重入之后会将state变量的值加1；
                5.Lock常用的具体实现包括：ReentrantLock、ReentrantReadWriteLock.ReadLock、ReentrantReadWriteLock.WriteLock；
               
            2.Lock的使用方式：
                Lock常用的实现类是ReentrantLock，以ReentrantLock为例：
                1.创建锁对象：
                    Lock lock = new ReentrantLock(boolean fair)；
                    说明：ReentrantLock支持公平锁和非公平锁，在创建锁时可以通过fair指定；fair为false，则表示非公平锁，否则为公平锁；
                2.加锁：
                    lock.lock()：申请加锁，阻塞式加锁，如果未获取到锁将会阻塞等待；
                    lock.tryLock()：尝试加锁，非阻塞式加锁，直接返回加锁结果，加锁成功返回true，加锁失败返回false；
                3.解锁：
                    lock.unlock();
            3.ReentrantLock加锁原理：
                1.非公平锁：
                    1.ReentrantLock调用lock方法加锁时会先通过CAS来修改AQS的state变量值；如果修改成功表示当前线程获取到锁，然后将表示持有锁的线程设置为当前线程；
                    2.如果没有获取成功，那么说明当前锁已经被线程持有了，有可能是别的线程也有可能是当前线程自己，所以会再次调用tryAcquire()尝试获取锁，在tryAcquire中仍然先通过CAS修改AQS的state值，修改成功返回true，否则检测当前持有锁的线程是否是当前线程，如果是则将state加一，然后返回true；否则返回false；
                    3.如果上述操作未加锁成功，那么会将该线程封装为一个node，然后通过cas的方式放置到等待队列末尾；并返回该node节点；
                    4.在死循环中获取该node节点的前一个节点，并判断是否是首节点，如果是则继续尝试获取一次锁，获取成功则将该node设置为首节点，同时该线程获取到锁；否则检测是否应当挂起该线程，如果需要挂起线程，则直接挂起线程并检测中断状态；
                    5.检测时有以下三种情况：
                        1.如果前一个节点的waitStatus是SIGNAL(-1)状态，那说明前一个线程已经挂起或者正在被挂起，那么当前线程自然也应该被挂起，所以将返回true;
                        2.如果前一个线程的状态为CANCALED(2)>0则说明前一个线程已经取消等待，那么从当前节点开始一直向前查找第一个状态不为Cancled的线程节点，然后将当前节点作为其后置节点；
                        3.上述两个条件都不满足，则说明当前线程必须要挂起，因此通过cas的方式将当前节点的waitStatus状态改为SIGNAL状态，然后通过上层循环将其挂起；
                        4.waitStatus状态枚举：
                            SIGNAL：-1：表示当前线程已经被挂起或者等待被挂起；
                            CANCELLED：2：表示当前线程已经取消等待锁；
                            CONDITION：-2：当前线程正在条件队列中等待被唤醒，线程调用condition.await之后将会处于该状态；
                            PROPAGATE：-3：表示当前线程需要将共享锁传播出去；
                            0：新建的Node其状态为0；
                2.公平锁：
                    1.公平锁和非公平锁的加锁逻辑是相同的，区别在于公平锁在加锁之前会先检测当前是否已经有线程持有锁，如果已经有线程持有锁则直接加到等待队列尾部；而非公平锁会在各个阶段尝试获取锁；
            4.ReentrantLock释放锁原理：
                1.调用tryRelease()方法对state减一；
                2.先检测当前持有所得线程是否是当前线程，如果不是则抛出异常；
                3.检测AQS中的state变量值-1之后是否是0，如果是则将表示持有锁的线程变量设置为null，将state值设置为0，返回true；
            5.关于Lock提供的Condition：
                1.Condition简介：
                    1.Condition相当于线程监视器，可以改变线程运行状态，功能类似于object.wait()和object.notify()、object.notifyAll();
                    2.Condition本质上通过AQS中的同步队列实现；
                2.Condition的使用方式：
                    Lock lock = new ReentrantLock();
                ​	 Condition con = lock.newCondition();
                ​	 Condition con1 = lock.new Condition();
                ​	 con.await()
                ​	 con1.await()
                ​	 con.signal()
                ​	 con1.signal()
                3.Condition的实现原理：
                    1.当调用了lock.newCondition之后，会创建一个conditionObject类型的对象，在该对象中通过firstWaiter和lastWaiter维护了一个双向链表，链表中存储着当前condition中等待被唤醒的线程；
                    2.当前线程通过condition调用了await()方法后，该线程对应的Node节点中的状态会被改为PROPAGATE，相当于从等待队列中移除该线程，然后被添加至condition queue中；
                    3.当其他线程调用condition中的signal是将会唤醒condition queue中的首个线程，调用signalALL()时将会遍历唤醒condition queue中的所有线程；
                4.Condition中的await和object中的wait对比：
                    1.await可以响应线程中断，wait不能响应线程中断；
        5.synchronized和Lock的区别对比：
           1.synchronized是java提供的关键字，用来修饰一个方法或者锁住一段代码块；而Lock是应用级别提供锁机制的接口，只能用来锁住代码块；
​			2.使用synchronized时，如果发生异常、线程wait、或者同步代码块执行完成后会自动释放持有的锁；而Lock则需要手动释放锁；
​			3.synchronized是不响应线程中断的，而Lock则允许中断；
​			4.synchronized无法获取加锁结果，只能阻塞式同步加锁，但是Lock可以获取加锁结果，可以非阻塞式加锁；
​			5.synchronized加的锁是非公平锁，而Lock可以选择加公平锁或者非公平锁；
​			6.synchronized加的锁是排它锁，而Lock则除过排他锁以还提供了共享锁；
    4.关于CAS：
        1.CAS原理：
            1.CAS是compare and swap的缩写，即先比较后交换的意思，CAS赋值有两步操作：
                1.先比较当前变量值是否是原始值，即当前变量的值有没有被其他线程更新；
                2.如果当前变量的值是原始值，那么将新值赋值给变量；如果当前的变量值已经被其他线程更新，那么之间返回失败；
            2.CAS由两步组成，但其属于原子指令，由操作系统本身支持其原子性，两步等于一步操作；
            3.CAS又称为乐观锁，CAS的理念是基于发生冲突的概率不大，竞争不激烈，那么多个线程可以同时执行赋值更新操作，只是在更新前检测一下即可，相对直接加锁而言，其效率要更高；
        2.Java中的CAS：
            1.java中提供了两种提供CAS功能的类库：Unsafe和Atomic相关类；
            2.关于Unsafe：
                1.Unsafe是java提供的执行CAS指令的原始类库，提供了一些了compareAndSwapXxxx()、getAndSetXxx()以及getAndAddXxx()方法；
                2.实际中使用时很少直接使用Unsafe相关类库，而是直接使用由Unsafe实现Atomic系列原子类库；
            3.关于Atomic：
                1.Atomic系列类由Unsafe实现，提供CAS相关功能，根据数据类型不同，分别包括以下几种原子类：
                    1.AtomicBoolean、2.AtomicInteger、3.AtomicLong、4.AtomicReference、5.LongAdder、6.AtomicStampedReference;
                2.上述类库均提供了一下四种方法：
                    1.get()：获取值；
                    2.set(E e)：设置值；
                    3.getAndSet(E e)：设置新值，并返回旧值；
                    3.compareAndSet(E expect, E update)：比较变量的原始值是否与expect相同，如果相同则将其值设置为update，并返回一个布尔值，表示是否设置成功；
                3.对于AtomicInteger和AtomicLong还额外提供了一下三种方法：
                    1.getAndIncrement()：自增1，并返回旧值，incrementAndGet()：自增1，并返回新值；
                    2.getAndDecrement()：自减1，并返回旧值，decrementAndGet()：自减1，并返回新值；
                    3.getAndAdd()：自增一个自定义值，并返回旧值，addAndGet()：自增一个自定义值，并返回新值；
            4.CAS在实际中使用的缺陷：
                1.ABA问题：
                    1.所谓的ABA问题是指变量在当前线程获取到原始值到准备更新的期间其他线程已经把变量的改动了，只不过改动了两次，先改为别的值，后又改为原始值，看起来变量的值并未发生改变，实质上已经被修改过了；
                    2.ABA问题在只在意最终结果，不在意具体过程的业务场景下无需关注，但是中间过程对业务结果有影响时必须得到解决，3.ABA问题的解决办法就是加上版本号，每次更新值之前先检测版本号和原始值是否都被未被更新，然后再更新变量的原始值，同时更新一下版本号；
                    4.java中通过AtomicStampedReference类来提供版本号更新和比较功能，防止发生ABA问题；
                2.CAS+自旋性能问题：
                    1.CAS+自旋操作，在竞争激烈的情况下，会导致大量的线程CAS失败进入自旋，然后再从新进行CAS，反复的自旋和CAS操作会耗费大量的cpu时间片，导致CPU执行真正的业务性能下降；
                    2.CAS+自旋导致性能下降的问题主要在于热点过于集中，CAS中都是改变同一个变量的值，因此其热点全部集中在同一个变量上，导致竞争太过激烈，间接导致操作失败率提高；解决这个问题的核心便是分散热点；
                    3.java中提供了LongAdder和DoubleAdder这两个类来解决普通CAS热点过于集中的问题；其核心原理就在于将热点从集中在一个变量上分散到一个数组的每一位上，增加单个线程修改的成功率，提高性能；
                3.关于LongAdder和DoubleAdder：
                    1.LongAdder和DoubleAdder中提供了add、increment、decrement实现LongAdder的更新操作，通过sum获取LongAdder的值，并通过reset来重置LongAdder的值；
                    2.由于LongAdder将原来属于一个变量的值分散到一个数组中，因此LongAdder无法再实时准确的提供其值，只能通过sum操作实时计算，但是该计算过程并未采取任何同步措施，所以通过sum获取到的结果比实际的结果要小；
                    3.像LongAdder这种分散热点的操作在ConcurrentHashMap中也有用到；
3.关于线程可见性：
    1.java线程内存模型及导致线程间不可见性的原因:
        1.所有的全局变量存储在主内存中，每一个线程还会有自己的私有内存；
        2.线程在访问全局变量时，需要先把全局变量的值复制到线程私有内存中，然后进行计算；
        3.线程在私有内存中计算完成之后再将更新结果刷新至主内存；
        4.其他线程如果是在线程刷新至主内存之后读取全局变量将会读取到最新值，如果是在线程刷新至主内存之前读取到的还是旧值； 
    2.包装内存可见性的解决方法：
        1.通过线程同步机制实现：
            jvm规范中要求，在同步代码块中访问全局变量时必须重新到主内存中读取变量值；在退出同步代码块时，需要将线程私有内存空间中的全局变量刷新至主内存中；
        2.通过volatile关键字：
            volatile通过系统级别的一致性协议来解决；系统的一致性协议规定，在一个处理器向内存中写入的数据是共享变量的数据时，将会通知其他处理器，将其他处理器中的共享数据失效；那么其他处理器中如果需要访问共享数据时将必须从内存中从新读取数据来保证数据在不同处理器中的可见性；    
        3.而系统之所以能够发现数据失效，是因为每个处理器都会采用嗅探机制来检查数据总线上传播的数据是否是自己持有的数据以及该数据是否已经被修改，如果满足上述条件那么将会认为该数据已经过期
4.关于有序性：
    1.导致线程间有序性问题的原因：
        线程间有序性问题是指由于线程内的指令被jvm优化，导致其执行顺序并未按照编码顺序执行；引起线程有序性问题的主要原因是指令重排序；
    2. 关于指令重排序：
        1.​为了能够提高指令的执行效率，编译器以及处理器都会调整指令的顺序，包括以下三种方式的重排序：
            1.编译器优化的重排序；编译器会在不改变单线程语义的情况下对指令重新排序；
            2.指令级并行的重排序；现代处理器会采用指令并行技术将指令重叠执行，为此处理器会调整指令顺序，然后将没有数据依赖关系的指令重叠执行；
            3.内存系统的重排序；
        2.系统规定，无论在哪个维度下如何进行指令重排序都不允许改变单线程下的运行结果；也就是所谓的as-if-serial语义；
    3.关于happens-before规则：
        1.由于在as-if-serial规则下，仅仅只能够保证指令重排之后单线程内的执行结果不变，但是对于共享变量在多个线程间访问的话，可能还是会因为指令重排发生异常；为此java提出了happens-before规则：
        2.java原生遵守以下happens-before规则：
    ​		程序次序规则：一个线程内，按照代码顺序，书写在前面的操作先行发生于书写在后面的操作； 
    ​		锁定规则：一个unLock操作先行发生于后面对同一个锁lock操作； 
    ​		volatile变量规则：对一个变量的写操作先行发生于后面对这个变量的读操作； 
    ​		传递规则：如果操作A先行发生于操作B，而操作B又先行发生于操作C，则可以得出操作A先行发生于操作C； 
    ​		线程启动规则：Thread对象的start()方法先行发生于此线程的每个一个动作； 
    ​		线程中断规则：对线程interrupt()方法的调用先行发生于被中断线程的代码检测到中断事件的发生； 
    ​		线程终结规则：线程中所有的操作都先行发生于线程的终止检测，我们可以通过Thread.join()方法结束、Thread.isAlive()的返回值手段检测到线程已经终止执行； 
    ​		对象终结规则：一个对象的初始化完成先行发生于他的finalize()方法的开始；
        3.禁止指令重排的方法：
            1.对于需要禁止指令重排的变量赋值操作，需要使用volatile来修饰对应的变量；来达到happens-before的要求；
            2.volatile实现指令重排的核心便是内存屏障，volatile会在读操作前和后插入storestore内存屏障，会在写操作后插入LoadLoad和LoadStore内存屏障来禁止指令重排序；