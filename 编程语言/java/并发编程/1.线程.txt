1.关于进程和线程概念：
    1.关于进程：
        1.进程是一个描述程序处于运行状态的概念，是指一个已经启动且正在被cpu执行或者等待被cpu执行的程序；
        2.进程是系统进行资源分配的最小单位，系统只会以进程为单位进行资源分配，所分配的资源主要是指进程运行所需要的内存空间以及一些其他资源。
        3.系统中进程之间互相独立，独立性主要体现在两个方面：
            1.进程使用的内存空间互相独立，一个进程不能访问到另一个进程使用的内存地址。
            2.进程的生命周期互相独立，一个进程挂掉之后并不会影响另一个进程的运行状态。
        4.系统会为每一个进程分配一个id，称为进程id，用来唯一标识一个进程，简称PID，在系统中可以通过进程id访问一个进程的运行信息；
    2.关于线程：
        1.线程则是组成进程的基本元素，一个进程由一个或者多个线程组成，反之，线程不能独立存在，必须属于某一个进程；
        2.线程是系统调度和执行指令的基本单位，cpu在执行程序指令时，执行的是某个线程中的指令，cpu在切换时是以线程为单位切换的；
        3.一个运行线程占用一个cpu核心，在线程数多于cpu核心数时，cpu通过为不同的线程分配特定的时间片来执行线程；
        4.进程在启动时就会创建一个线程，称之为进程的主线程，进程中需要使用到的其他线程则在主线程中创建，一个进程中的线程启动之后和主线程将无主次之分，具有相同的调度级别。
        5.同一个进程的多个线程间具有一定的独立性，主要体现在两个方面：
            1.线程间执行的指令互相独立；
            2.线程指令的执行进度互相独立。
        6.进程和进程下的线程在生命周期上会互相影响，主要体现在两个方面：
            1.一旦进程中的所有前台线程均执行完毕之后进程也会结束。
            2.一旦进程中的某一个线程发生异常导致崩溃，也会导致进程崩溃。

2.线程个数的设置：
    1.线程虽然在程序中主动创建，但并非可以创建任意多个线程，一个进程能够创建的线程数主要会受到以下三个个方面的约束：
        1.系统的内存空间大小：
            1.每创建一个线程都会为该线程创建一个线程栈，存储线程中的变量等信息，线程过多会导致线程栈内存不足最终发生内存溢出异常。
        2.系统的cpu核心数：
            1.线程数远远多于cpu核心数的时候，会导致cpu频繁的进行线程切换，而真正执行业务逻辑的时间片变少，导致性能下降。
        3.系统的线程模型：
            1.LinuxThreads模型下，一个进程能够创建的线程数在1024个，该值可以配置。
            2.在NPTL模型下，单个进程内能够创建的线程数没有限制。

3.Java中创建线程：
    1.通过Thread类或集成Thread类来创建线程：
        1.通过Thread类来创建线程：
            1.创建线程：
                Thread thread = new Thread();
            2.启动线程：
                thread.start();

        2.通过继承的方式创建线程并启动线程：
            1：创建线程：
                public class SelfThread extends Thread {
                    @Override
                    public void run() {
                        // todo
                    }
                }
            2.启动线程：
                Thread thread = new Thread();
                thread.start();

        3.通过函数式接口的方式创建并线程：
            1.创建线程：
                Thread thread = new Thread() {
                    @Override
                    public void run() {
                        // todo
                    }
                };
            2.启动线程：    
                thread.start();

    2.通过继承Runable接口创建线程：
        1.通过继承的方式创建线程并启动线程：
            1：创建线程：
                public class SelfThread implements Runable {
                    @Override
                    public void run() {
                        // todo
                    }
                }
            2.启动线程：
                Thread thread = new Thread(new SelfThread());
                thread.start();

        2.通过函数式接口的方式创建并线程：
            1.创建线程：
                Thread thread = new Thread(Runable() {
                    @Override
                    public void run() {
                        // todo
                    }
                });
            2.启动线程：    
                thread.start();
    
    3.通过继承callable接口创建线程：
        1.通过继承的方式创建线程并启动线程：
            1：创建线程：
                public class SelfThread implements Callable<String> {
                    @Override
                    public String call() {
                        // todo
                    }
                }
            2.启动线程：
                Ca c1 = new Ca();
                FutureTask<String> ft1 = new FutureTask<String>(c1);
                Thread ct1 = new Thread(ft1);
                thread.start();

        2.通过函数式接口的方式创建并线程：
            1.创建线程：
                Thread thread = new Thread(new FutureTask<String>(new Callable<String>() {
                    public String call() throws Exception {
                        return null;
                    }
                }));
            2.启动线程：    
                thread.start();

    4.关于线程相关创建方式说明：
        1.综述：
            1.从创建形式上看，线程的创建方式有三种，即Thread、Runable、Callable；
            2.从本质上看，线程的创建方式只有一种，就是Thread，其他两种：Runable和Callable本质上都是通过在Thread的run方法中调用其Runable的run方法和Callable的call方法实现的；
        2.关于Thread:
            1.Thread是一个完整的线程实现类，完整的提供了线程的所有功能，能够直接通过Thread创建线程。
            2.Thread通过start方法启动，并调用run方法执行具体业务逻辑。
            3.实际业务中通过Thread创建线程的方式有两个弊端：
                1.Thread是一个实现类，如果业务类直接继承Thread创建线程，业务类将无法再继承其他类，会对业务类的扩展造成影响。
                2.Thread执行业务逻辑的run方法不支持返回值。在需要获取线程执行结果的场景下无法满足要求。
            4.为了解决Thread影响业务类扩展的弊端，Thread构造方法支持传入Runable作为参数，并在run方法中检测Runable是否为null，如果不为null则转为调用Runable的run方法，如果为null则默认不执行任何操作。通过这种方式可以把线程要执行的业务逻辑改为由继承Runable接口来实现。
        2.关于Runable:
            1.Runable是java中对Thread要执行的业务逻辑进行扩展的标准接口，内部只定义了一个run方法，线程要执行的业务逻辑需要定义在run方法中；
            2.Runable是一个接口，继承Runable之后仍然可以再继承其他类，因此Runabel存在的意义就在于可以避免业务类直接继承Thread导致业务类扩展受阻的问题。
            3.Runabel只是一个接口，是对Thread的扩展，并不是一个线程，Runabel的run方法最终还是通过Thread的run方法来调用的。
        3.关于Callable：
            1.无论是Thread还是Runable实现线程执行的业务逻辑，都无法获取线程的执行结果，而Callable接口则定义了call方法，并允许在call方法中返回线程的执行结果。
            2.Callable是一个泛型类，在使用时需要指定线程执行完成之后要返回的数据类型；
            3.同时Callable只是一个接口，业务类继承了Callable之后仍然能够继承其他类，不会影响业务类的可扩展性；
            综上，Callabel既可以实现获取线程执行结果的目的，也可以实现避免业务类扩展受阻的问题。
            4.Callable必须借助FutureTask来完成线程的创建，原因有两个：
                1.Callable本身没有获取返回值得方法，需要借助FutureTask的get()方法同步返回结果；
                2.Thread并不支持接收Callable类型的参数，需要通过FutureTask将Callable适配为Runable类型；
        4.关于FutureTask：
            1.FutureTask的功能：
                1.FutureTask是Callable转换为Runable的适配器，会将Callable类型转换为Runable，然后作为参数传递给Thread。是连接Callable和Thread的桥梁。
                2.同时FutureTask又提供了获取Callable执行结果的方法。能够通过FutureTask以同步的方式来获取Callable的返回值和其发生的异常；

            2.FutureTask本质：
                1.继承关系：
                    1.FutureTask是RunnableFuture接口的实现，而RunableFuture又直接继承自Runable和Future接口，因此FutureTask既是Runable类型同时也是Future类型；也正因为FutureTask是Runable类型，才能够作为Thread的参数传递给Thread;

                2.功能原理：
                    1.FutureTask以Callable作为构造方法的参数，接收Callable类型的实例对象，同时实现了Runable的run方法，并在run方法中调用Callable的call方法，并将call方法的执行结果赋值给实例属性outcome；
                    2.FutureTask同时又实现了Future获取返回值得get方法，并在get方法中返回表示执行结果的实例属性outcome的值；

                3.FutureTask使用到的设计模式：
                    1.本质上，FutureTask就是适配器模式的具体实现；通过FutureTask让Callable能够更好的适配Thread，方便以统一的方式创建线程；

    5.不同创建线程方式的区别：
        1.Runable和Thread的区别：
            1.继承方式不同：
                1.Thread是抽象类，一旦继承了Thread之后将不能在继承其他类；
                2.Runable是接口，继承Runable之后还能够继承其他类；
            2.线程类内部资源共享方式不同：
                1.在Thread实现类内部创建的实例共享资源，每一个Thread线程实例都将拥有一份；
                2.在Runable实现类内部创建的实例共享资源，使用同一个Runable对象创建Thread线程时则所有的线程共享该Runable的实例共享字段；
        2.关于Runable和Callable的区别：
            1.返回值差异：
                1.Runable类型的run方法无返回值，因此无法返回线程执行结果；
                2.Callable类型的call方法有返回值，可以同步获取call方法的执行结果；如果线程执行时间较长，那么获取执行结果的操作将会阻塞；
            2.创建方式不同：
                1.Runable实例可以直接作为Thread的参数创建线程实例；
                2.Callable实例则需要通过适配器FutureTask适配之后，才能传递给Thread创建线程实例；

4.线程的基本属性：
    1.当前正在被执行的线程：
        1.方法：Thread.currentThread()
        2.currentThread方法是一个静态方法，通常用在线程内部中，返回的是正在执行该指令的线程对象；
    2.线程id：
        1.系统为每一个线程设置了一个整数id，用来唯一标识当前进程的线程，称为线程id；
        2.当前线程的id通过线程对象调用实例方法getId()即可获取，如：Thread.currentThread.getId();
    3.线程名：
        1.线程名的设置：
            1.默认情况下，线程名会被设置为Thread-0、Thread-1这种形式；
            2.也可以在创建线程时设置线程名：new Thread("线程名")、new Thread(Runable runable,"线程名")
            3.通过线程对象调用实例方法setName("线程名")设置：Thread.currentThread.setName("线程名称")
        2.获取线程名：
            1.通过线程对象的实例方法getName()即可获取：Thread.currentThread.getName();
    4.线程优先级：
        1.设置线程的优先级：
            线程优先级默认都是5，最高可设置为10，最低可设置为1；
            setPriority(int priority);
            如：Thread.currentThread().setPriority("thread-name");
        2.获取线程的优先级：
            getPriority();
            如：Thread.currentThread().getPrority();
        3.关于线程的优先级：
            1.默认情况下线程优先级相同，平等的竞争cpu时间片；
            2.手动设置线程优先级也仅仅只是对cpu调度频率有影响，并非完全线性的设置线程被执行到的频率；
            3.线程优先级具有继承特性，线程中启动的其他线程将会继承该线程的优先级；
    5.守护线程：
        1.守护线程是指运行在进程后台的线程，与之相对的是前台线程，默认情况下创建的线程均是前台线程；
        2.守护线程与前台线程本质上相同，只是进程结束与否只与前台线程相关，只要前台线程没有结束进程也不会结束，但是只要进程结束，无论守护线程是否结束，都将被终止；
        3.前台线程通常用来执行一些必须的业务性事务，后台线程则用来执行一些可以随时被终止的非业务性事物；
        4.设置为守护线程的方式：setDaemon(true)；
        5.特别注意的是，后台线程必须在前台线程未调用start()方法启动之前设置，并且一旦线程转换为守护线程之后将无法转换为前台线程；

5.线程的生命周期：
    1.线程生命周期一共分为以下几个阶段：新建状态、就绪状态、运行状态、阻塞状态、等待状态、超时等待状态、结束状态；
    2.线程状态描述：
        1.新建状态，(NEW)
            1.指线程对象已经创建，但暂未调用start()方法启动之前的状态；
            2.此时对于系统而言，仅仅只是一个普通的对象，并非一个线程；
        2.就绪状态：(RUNABLE)
            1.指线程对象调用start()方法之后，但暂未被处理器执行的状态；
            2.处于就绪状态的线程才能够被处理器执行；
        3.运行状态：
            指当前线程正在被处理器执行；此时线程的状态为运行状态；
        4.阻塞状态：(BLOCKED)
            1.线程在进入同步方法或者同步代码块时未获取到锁将会进入阻塞状态；
        5.等待状态：(WAITING)
            指运行中的线程调用了Object.wait()、Thread.sleep()、Thread.join()方法之后且未指定超时时间的状态、或者线程正在等待IO方法返回的状态;
        6.超时等待状态：(TIMED_WAITING)
            指运行中的线程调用了Object.wait(long)、Thread.sleep(long)、thread.join(long)方法之后且指定超时时间的状态;
        5.结束状态：(TERMINATED)
            线程中的指令全部运行完毕，线程执行结束的状态；
    3.获取线程状态：
        Thread.currentThread.getState();

6.线程状态管理：
    1.object类以及Thread类提供了几个线程状态管理的相关方法，具体如下：
        1.Object类：
            object.wait()、object.notify()、object.notifyAll()
            说明：上述方法均是Object类的实例方法；需要通过Object实例调用；
        2.Thread类：
            Thread.sleep()、Thread.yield()、thread.join()
            说明：Thread.sleep()和Thread.yield()是Thread类的静态方法，而Thread.join()是实例方法，需要通过Thread实例调用；
    2.关于object.wait()、object.notify()、object.notifyAll()方法：
        1.方法功能描述：
            1.object.wait()通常用来阻塞线程，使线程从运行状态进入阻塞状态，并释放持有的锁，但是不会响应线程中断；
            2.object.notify()方法用来唤醒调用过object.wait()而进入阻塞状态的指定线程；
            3.object.notifyAll()方法用来唤醒所有调用过object.wait()而进入阻塞状态的线程；
        2.使用方式和场景：
            1.上述三个方法通常需要和线程同步机制以及条件变量配合使用，来满足线程间需要按照一定顺序同步执行的场景；
            2.相关原理如下：
                1.通过同步机制保证同一时刻只能有一个线程执行相关代码；
                2.通过条件变量检测当前线程是否能够执行，如果不能执行则调用object.wait()方法来挂起线程；
                3.目标线程执行条件允许之后，通过调用object.notify()唤醒线程执行指令；

        3.关于object.notify()和object.notifyAll()：
            1.object.notify()一次可以唤醒一个处于阻塞状态的线程，如果同时有多个线程处于阻塞状态时将随机唤醒一个；
            2.object.notifyAll()一次可以唤醒所有处于阻塞的状态的线程；
            3.实际使用中：
                (*待考证)notifyAll()可能造成惊群效应，而notify()又可能造成死锁；
    3.关于Thread.sleep():  
        1.该方法是Thread类的静态方法，可以使线程在运行状态下直接进入阻塞状态，并且可以设置一个有效时间，在到达有效时间之后将会从新进入就绪状态，与该方法效果相同的还有TimeUnit.XXX.sleep(int sleepTime);
        2.该方法的功能只是单纯的阻塞当前线程一段时间，因此不必和同步机制配合使用，并且会响应线程的中断；
        3.该方法如果用在同步代码块或者同步方法中时并不会释放锁；
    4.关于thread.join()：
        1.该方法并非Thread类静态方法，而是需要通过Thread类实例对象调用；
        2.该方法被通过指定线程调用之后，当前线程将会进入阻塞状态，而调用该方法的线程会进入运行状态开始运行；
        3.该方法也可以设置超时时间，如果超时时间到达之后，调用该方法的线程仍然没有执行完毕时，那么被阻塞的线程也会进入就绪状态；
    5.Thread.yield()：
        1.该方法是Thread类的静态方法，理论上是让出当前线程的执行机会，把执行机会让给优先级和当前线程相同或者比当前线程更高的线程；
        2.但实际上该方法调用之后，线程将会重新进入就绪状态，而非进入阻塞状态，因此可能在当前线程调用完该方法之后又重新获取执行机会而进入运行状态；

7.处理线程运行中的异常：
    1.子线程虽然通过主线程启动，但是子线程启动之后将和主线程一样平等，无法通过主线程捕获子线程中的发生的异常；
    2.对于子线程中的异常通常采用两种方式处理：
        1.子线程中的异常可以在子线程的run方法中捕获并处理；
        2.如果通过Callable来创建线程，则可以在futureTask.get()获取执行结果的时候捕获并处理异常。

8.线程中断：
    1.关于线程中断：
        线程中断是指让正在运行中的线程停止执行的通知机制。
    2.线程中断描述：
        出于某个条件，需要让某个正在执行中的线程停止运行，那么需要向正在运行中的线程发送中断信号，被中断的线程可以选择在内部响应中断信号；
        但是，线程中断仅仅只是向被中断线程发送中断信号，并不是直接停止正在执行的线程，线程是否真正的中断，取决于线程内部是否响应中断信号，以及如何处理段信号。
    3.java中中断的实现原理：
        1.线程的中断通过布尔变量来实现的，默认情况下，中断信号是false，线程外部可以调用interrupt()方法将该信号变量设置为true；
        2.线程内部可以通过isInterrupted()或者interupted()来检测中断信号是否被设置为true，并选择合适的方式进行处理；
    3.线程中断api及异常：
        1.向被中断线程发送中断信号：
            interrupt()：
            在被中断线程外部使用，向某个线程发送中断信号，会将被中断线程内部的中断标志位设置为true;
        2.被中断线程内部检测中断信号：
            1.isInterrupted():在线程内部使用，检测当前线程内的中断标志位状态，返回true或false；
            2.interrupted():在线程内部使用，检测当前线程内部的中断标志位状态，返回true或者false，并重置中断标志位为false;
        3.线程内部对中断信号的处置方式：
            1.通常情况下，对于线程中断信号的处理有三种方式；
                1.如果当前方法已知如何处理线程中断信号，那么可以主动进行检测和处理。
                2.如果当前方法如果无需理会中断信号，则可以不检测，不处置。
                3.如果当前方法需要处理中断，但是又不知道如何处理，则通常可以抛出一个InterruptedException，表示当前线程内部收到了中断信号，具体则由调用方处理。
                特别注意的是，一旦抛出InterruptedException异常之后，线程内的中断信号将会被重置为false。
            2.对于线程在不同状态下对于中断信号的处理也不相同：
                1.线程如果处于NEW、TERMINTED状态，则线程不会响应外部发送来的中断信号；
                2.线程如果处于RUNABLE、BLOCKED状态，则仅仅只是将线程内部的中断状态标志位设置为true，线程是否响应中断信号则取决于线程自己。
                3.线程如果处于WAITING、TIMED_WAITING状态，则线程将会向外抛出一个InterruptedException异常。
