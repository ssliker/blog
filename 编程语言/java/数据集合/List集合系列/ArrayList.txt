1.ArrayList特征：
    1.ArrayList属于数据结构中的线性表，用来存储一组数据值本身；
    2.ArrayList中底层通过数组实现，因此具备以下特征：
        1.元素有序，按照存储顺序排序
        2.元素可重复，不同位置元素互相独立；
        3.元素可以为null；
        4.元素有下标索引，索引从左向右从0开始计数，可以通过下标索引访问元素；
    3.ArrayList未做任何同步措施，因此并非线程安全的数据集合，不能直接用作多线程环境下的共享变量；
    4.ArrayList相比数组而言能够自动实现扩容，但其容量并非没有限制，其容量限制来自两个方面：
        1.ArrayList中表示元素个数的属性size时int类型，因此ArrayList中元素个数超过Integer.MAX_VALUE之后将无法表示；
        2.ArrayList中在扩容时会检测扩容之后的新容量大小，如果新容量大小超过MAX_ARRAY_SIZE(Integer.MAX_VALUE-8)，将会把数组大小设置为Interger.MAX_VALUE；

2.ArrayList的继承结构：
    1.继承结构图：
        ArrayList：
            --->AbstractList--->List--->Collection
            --->List--->Collection
            --->RandomAccess
    2.继承结构说明：
        1.通过继承结构图可知其所属类型；
        2.在AbstractList中已经提供了部分实现，ArrayList继承了AbstractList部分实现，同时也增加了部分定制化内容；
        3.ArrayList同时继承了RandomAccess；关于RandomAccess而言，并无任何需要实现的方法，仅仅只是一个特征，表示ArrayList支持高效的随机访问；

3.ArrayList的底层实现原理：
    1.ArrayList底层通过一个Object数组实现ArrayList元素的存储，对ArrayList中元素的操作都是基于该Object数组实现的，因此ArrayList具备数组的所有特征；
    2.ArayList在数组的基础上增加了自动扩容机制，在数组容量不足时会自动进行扩容，能够避免数组长度固定的限制；

4.ArrayList的构造方法：
    1.创建空列表：
        ArrayList<> al1 = new ArrayList<>();
        内部具体实现：将一个空Object数组赋值给elementData，此时数组容量为0，元素个数为0；

    2.指定初始容量创建ArrayList：
        ArrayList<> al = new ArrayList<>(n)
        内部具体实现：创建一个长度为n的Object数组，赋值给elementData，此时数组容量为n，元素个数为0；
        特别注意：n不能小于0，否则将抛出异常；
    
    3.以其他Collection集合为参数创建ArrayList：
        ArrayList<> al = new ArrayList<>(collec)
        内部具体实现：检测collec是否是ArrayList类型，如果是则将collec调用toArray()的结果赋值给elementData，否则通过Arrays.copyOf将collec.toArray()的结果复制给elementData；
    
    4.特别注意：
        1.ArrayList中数组长度和列表长度并不相同：
            1.数组的长度即存储元素的Object数组的长度，表示当前列表的容量；
            2.列表长度表示数组中实际存储元素的个数；
        2.ArrayList中的增删改查操作凡需要以索引下标访问元素时：
            1.都会先检查索引值是否越界，如果越界将会报越界异常；
            2.并且检查均是以该索引下标与·列表长度·进行对比检查是否越界，而不是数组长度，需要特别注意；

5.ArrayList的功能API:
    1.增加元素：
        add(Obejct o)：
            1.在列表末尾增加元素o；
            2.先检测是否需要扩容，然后追加元素至末尾；复杂度为O(1)；
        add(int index, Object O)：
            1.在列表指定索引位置插入元素o；
            2.检测index是否越界，检测是否需要扩容，通过复制的方式将指定位置之后的元素全部向后复制一位，腾出指定位置的空间，然后将元素设置到指定位置；
        addAll(Collection collec)：在列表末尾插入集合collec；
        addAll(int index, Collection collec)：在列表指定位置插入集合collec；

    2.删除元素：
        remove(Object o)：
            1.删除指定元素o；
            2.遍历查找元素o所在位置，然后通过将该位置之后的元素全部向前复制一位覆盖掉该元素，达到删除的目的；
        remove(int index)：
            1.删除指定位置i处的元素；  
            2.通过将该位置之后的元素全部向前复制一位覆盖掉该元素，达到删除的目的；
        removeAll(Collection collec)：删除指定集合中的元素；
    
    3.修改元素：
        set(int index, Object o)：
            1.修改指定位置i处的元素值为o；
            2.直接修改，无需定位，复杂度为O(1)；

    4.查询操作：
        1.获取元素：
            get(int index)：
                1.获取指定位置index处的元素；
                2.直接定位元素，复杂度为O(1)；
        
        2.检测元素是否存在：
            contains(Object o)：
                1.查看指定元素是否在列表中存在；
                2.遍历整个链表查找该元素，复杂度为O(n)；
        
    5.列表本身操作：
        1.获取列表元素个数：
            size()：返回列表元素个数；
            isEmpty()：检测列表是否为空；
        2.将列表转换为数组：
            toArray()：将列表转换为对应类型的数组；
        3.手动进行扩容：
            ensureCapacity(int newCapacity)：手动进行扩容；
        4.返回元素所知位置：
            indexOf(Obejct o)：返回元素o首次查找到时所在位置；
            lastIndexOf(Object o)：返回元素o反向首次查找到时所在的位置；
        5.清空整个list
            clear()：清空整个ArrayList;

6.ArrayList的扩容流程：
    1.ArrayList的扩容时机：
        1.手动调用ensureCapacity(int newCapacity)进行扩容；
        2.增加元素时触发扩容；
    
    2.ArrayList的扩容流程：
        1.计算需要扩容的容量：使用列表中元素个数size+新增元素个数作为待扩容容量；
        2.检测列表是否新建状态：如果列表是新建状态，那么比较默认长度(10)与待扩容容量比较，取其较大的值作为最终需要扩容的容量；
        3.将modCount++，为快速失败机制做准备；
        4.将数组旧长度+旧长度/2作为新容量；
        5.检测新容量是否满足需要扩容的容量，如果不满足，则间需要扩容的容量作为新容量；
        6.检测新容量是否超过MAX_ARRAY_SIZE，如果超过，则将数组容量设置为Integer.MAX_VALUE；
        7.通过拷贝的方式将旧数组中的数据拷贝至新数组中；

7.ArrayList的遍历：
    //for()
    for(int i=0;i<al.size();i++){
        System.out.println(al.get(i));
    }

    //foreach()
    for (String item : al){
        System.out.println(item);
    }

    // forEach()
    al.forEach(item->{
        System.out.println(item);
    });

    //iterator+while
    Iterator<String> iterator = al.iterator();
    while (iterator.hasNext()){
        System.out.println(iterator.next());
    }

    //iterator+forEachRemaining
    Iterator<String> iteratorForEach = al.iterator();
    iteratorForEach.forEachRemaining(item->{
        System.out.println(item);
    });

8.ArrayList功能API使用说明：
    1.对于增加元素：
        1.关于扩容：每次增加元素前会先检查是否需要扩容，如果需要扩容，将会先进行扩容，因此实际使用时为了避免频繁扩容，可以预设一个合理的大小；
        2.关于拷贝：按照索引位置增加元素时，会调用System.arraycopy()方法进行数组拷贝，如果在数组头部添加元素，将会导致整个数组被拷贝，性能较差，这种情况应该尽量避免，或者选择LinkedList作为列表容器；
    2.对于删除元素：
        1.关于查找：如果是按照指定位置删除，那么直接将指定位置之后的元素向前复制一份实现删除功能；如果是按照元素值删除，那么还需要找到首个该元素的位置，然后将该位置之后的元素向前复制一份实现删除功能；
        2.关于拷贝：由于删除功能本质上是通过数组拷贝实现的，因此尽量避免删除首个元素，否则将导致整个数组的拷贝；
    3.关于遍历和随机访问：
        1.关于随机访问：由于ArrayList中每一个元素都有确定的下标索引，因此，ArrayList的随机访问性能很好；
        2.关于遍历：同时由于ArrayList占用一段连续的内存空间，因此其对于cpu的缓存特性很友好，可以充分利用到cpu高速缓存的局部特性，因此遍历性能很好；
    4.关于遍历修改ArrayList的元素：
        1.如果仅仅只是修改元素本身的属性值，那么所有的遍历方式都可以实现；
        2.如果是希望将ArrayList某个位置的元素替换为另一个元素，那么只能使用for(int i;i<size;i++)循环按照索引遍历的方式，并调用set()方法实现；
        3.如果是希望在遍历时删除某些元素，那么只能使用iterator+while的方式，并调用iterator.remove()实现；
    5.关于ArrayList的去重和检测：
        1.ArrayList内部检测元素是否存在的contains()方法是通过遍历来查找对比实现的，最差的时间复杂度是O(n)，因此效率很差，尽量避免直接使用ArrayList检测元素存在性，而是将ArrayList转为Set进行检测；Set内部使用hashcode实现元素的查找，效率较高；
        2.同时避免使用contains()方法结合循环遍历实现ArrayList的去重，而是应当将ArrayList转为Set进行去重；
    