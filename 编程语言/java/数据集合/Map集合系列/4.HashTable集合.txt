1.关于Hashtable集合特征：
    1.Hashtable属于数据结构中字典类型，用来存储k-v类型的键值对数据；
    2.Hashtable中不允许key和value为null，且Hashtable中key不能重复；
    3.Hashtable不会维护存储在其中的k-v顺序，在遍历HashMap时，并不会按照key的添加顺序或者key的大小顺序遍历；而是按照hash槽的顺序遍历；
    5.Hashtable本身有通过synchronized做线程同步处理，属于线程安全集合，可以直接作为多线程环境下的共享变量；

2.继承结构图：  
    Hashtable--->Dictionary
             --->Map
    1.从继承结构上即可看到Hashtable的类型：其属于Map类型；

3.实现原理：
    1.底层通过数组作为hash桶，通过链表来解决hash冲突；
    2.Hashtale中的方法均通过synchronized修饰，因此其线程安全；

4.构造方法：
    1.创建一个空的Hashtable：
        Hashtable table = new Hashtable();
    
    2.创建一个指定初始容量的hashtable:
        Hashtable table = new hashtable(int initialCapacity)
    
    3.创建一个指定初始容量和扩容因子的Hashtable:
        Hashtable table = Hashtable(int initialCapacity, float loadFactor)

5.Hashtable提供的API:
     1.新增k-v：
        put(k, v)
        功能描述：
            1.向HashMap中添加一个k-v；如果k已存在，则直接使用新值覆盖旧值；
        putAll(Map m)
        功能描述：
            1.向HashMap中添加一个已有的Map类型集合；
    2.删除k-v：
        remove(k)
        功能描述：
            1.从HashMap中删除键为k的键值对；
            2.如果k不存在则不作任何处理；
        remove(k,v)
        功能描述：
            1.从HashMap中删除键为k,且值为v的键值对；
            2.如果k不存在或v未匹配到则不作任何处理；
    3.替换k-v:
        replace(k,v)：
        功能描述：
            1.将键为k对应的值替换为v；如果没有匹配到将不作任何处理；
        replace(k,oldv,newv)：
        功能描述：
            1.将键为k，且值为oldv的键值对值替换为newv；如果没有匹配到k或者oldv将不作任何处理；
    
    4.获取k-v：
        get(k)
        功能描述：
            1.从HashMap中获取键为k的值；
            2.如果k不存在则返回null；
        getOrDefault(k,default)
        功能描述：
            1.从HashMap中获取键为k的值；
            2.如果k不存在则返回default；
    
    5.检测k和v是否存在：
        containsKey(k)：检测k是否存在
        containsValue(v)：检测v是否存
    
    6.其他方法：
        size()：返回当前map中键值对的个数；
        isEmpty()：检测当前map是否为空；
        clear()：清空当前map；
        keySet()：返回map中key的set集合：Set<String>；
        values()：返回map中的value集合：Collection<String>；
        entrySet()：返回map中节点的集合：Set<Map.Entry<K,V>>；
6.Hashtable的实现原理：
    1.底层实现：
        Hashtable底层仅通过数组+链表来实现；数组用作hash桶，链表用来解决hash冲突；
    2.默认值：
        1.Hashtable默认长度：11
        2.Hashtable默认扩容因子：0.75
        3.一次扩容大小：旧长度的2倍+1；
    3.为何Hashtable中key和value不能为null:
        源码中可以看到在Hashtable的put方法中有对value进行空值校验，如果value为空将会抛出空指针异常；而且其直接调用了key的hashcode()方法，如果key为null时同样会抛出空指针异常；
    4.Hashtable为何是线程安全的：
        Hashtable内部的方法都使用了synchronized修饰，是同步方法，可以保证线程安全；

    5.添加元素流程：
        1.调用key.hashcode()方法获取key的hash值；
        2.将得到的hash值与数组长度相与，获取key应该在数组中的位置；
        3.获取数组指定为的元素，判断其是否为null，如果不为null则遍历整个链表，检测是否有key和hash值相同的k-v，有的话则用新值替换旧值即可；
        4.否则，需要检测当前hashtable中的元素是否超过扩容阈值，如果超过那么调用rehash()进行扩容，之后从新计算当前key在扩容之后数组中的位置，然后将key-value添加到数组中的指定位置；
    6.扩容流程：
        1.计算新容量为旧容量的2倍+1；
        2.判断新容量是否超过MAX_ARRAY_SIZE，如果超过那么将最大容量设置为MAX_ARRAY_SIZE;
        3.重新计算扩容阈值，
        4.遍历旧数组，将旧数组中的元素重新计算位置之后添加到新数组中；

7.Hashtable和HashMap的对比：
    1.线程安全性不同，Hashtable是线程安全的集合类，HashMap是非线程安全的集合类；
    2.底层实现不同，Hashtable底层是数组+链表实现的，HashMap底层是数组+链表/红黑树实现的；
    3.k-v要求不同，Hashtable中要求key和value都不能为null，HashMap中允许key和value可以为null；
    4.默认容量不同：Hashtable中默认容量大小为11，HashMap中默认容量为16；
    5.单次扩容大小不同：Hashtable中单次扩容为旧容量的2倍+1，HashMap中单次扩容为旧容量的2倍；


    
