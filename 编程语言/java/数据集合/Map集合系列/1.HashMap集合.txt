1.HashMap特征：
    1.HashMap属于数据结构中字典类型，用来存储k-v类型的键值对数据；
    2.HashMap中允许key和value为null，但由于在HashMap中key不能重复，因此最多只能有一个key为null，值则无限制，可以有多个值允许为null；
    3.HashMap中允许key为null的原因是在通过key获取其hash值时兼容了key为null的情况，如果key为null，那么hash值始终返回0，但是实际使用中要避免存储key为null的值；
    4.HashMap不会维护存储在其中的k-v顺序，在遍历HashMap时，并不会按照key的添加顺序或者key的大小顺序遍历；而是按照hash槽的顺序遍历；
    5.HashMap本身没有做任何线程同步处理，并非线程安全集合，不可以直接作为多线程环境下的共享变量；

2.HashMap继承结构：
    1.继承结构图
        HashMap---|AbstractMap---|Map
               ---|Map
    2.关于继承关系：
        1.HashMap同时继承AbstractMap抽象类和Map接口。而AbstractMap则直接继承自Map接口；
        2.本质上HashMap直接继承自AbstractMap即可，对于既继承AbtractMap又继承Map接口本质上属于设计缺陷！

4.HashMap的构造方法：
    1.使用默认容量，默认扩容因子创建HashMap：
        HasMap hashmap = new HashMap();
    2.使用指定容量，指定扩容因子创建HashMap：
        HasMap hashmap = new HashMap(int initialCapacity, float loadFactor)
    3.使用指定初始容量创建HashMap：
        HasMap hashmap = new HashMap(int initialCapacity)
    4.使用其他map创建HashMap：
        HasMap hashmap = new HashMap(Map<? extends K, ? extends V> m)

5.HashMap功能：
    1.新增k-v：
        put(k, v)
        功能描述：
            1.向HashMap中添加一个k-v；如果k已存在，则直接使用新值覆盖旧值；
        putIfAbsent(k, v)
        功能描述：  
            1.向HashMap中添加一个k-v；但如果k已存在，则不添加，直接返回；
        putAll(Map m)
        功能描述：
            1.向HashMap中添加一个已有的Map类型集合；
    2.删除k-v：
        remove(k)
        功能描述：
            1.从HashMap中删除键为k的键值对；
            2.如果k不存在则不作任何处理；
        remove(k,v)
        功能描述：
            1.从HashMap中删除键为k,且值为v的键值对；
            2.如果k不存在或v未匹配到则不作任何处理；
    3.替换k-v:
        replace(k,v)：
        功能描述：
            1.将键为k对应的值替换为v；如果没有匹配到将不作任何处理；
        replace(k,oldv,newv)：
        功能描述：
            1.将键为k，且值为oldv的键值对值替换为newv；如果没有匹配到k或者oldv将不作任何处理；
    
    4.获取k-v：
        get(k)
        功能描述：
            1.从HashMap中获取键为k的值；
            2.如果k不存在则返回null；
        getOrDefault(k,default)
        功能描述：
            1.从HashMap中获取键为k的值；
            2.如果k不存在则返回default；
    
    5.检测k和v是否存在：
        containsKey(k)：检测k是否存在
        containsValue(v)：检测v是否存
    
    6.其他方法：
        size()：返回当前map中键值对的个数；
        isEmpty()：检测当前map是否为空；
        clear()：清空当前map；
        keySet()：返回map中key的set集合：Set<String>；
        values()：返回map中的value集合：Collection<String>；
        entrySet()：返回map中节点的集合：Set<Map.Entry<K,V>>；
    
    7.聚合汇总方法：
        compute()：
        功能描述：
            1.函数式处理方法，对于输入的k，将会执行针对k和v的处理逻辑，接受一个返回值作为k的新v；
        使用方法：
            compute(ikey,(k,v)->{
                // k->ikey
                // v->map.get(k)
                return newv;
            })
        注意事项：
            1.k如果在map中不存在时，v将会数null，因此在该方法中必须手动处理v为null的情况；

        computeIfAbsent():
        功能描述：
            1.函数式处理方法，对于输入的k，如果在map中不存在时，才会执行添加的函数式处理逻辑；接受一个返回值作为该k的新v；
        使用方法：
            computeIfAbsent(ikey,(k)->{
                // k->ikey
                return newv;
            })
        注意事项：
            1.只有ikey在map中不存在时才会执行后面的函数式逻辑；
        
        computeIfPresent():
        功能描述：
            1.函数式处理方法，对于输入的k，如果在map中存在时，才会执行添加的函数式处理逻辑；接受一个返回值作为该k的新v；
        使用方法：
            computeIfPresent(ikey,(k,v)->{
                // k->ikey
                return newv;
            })
        注意事项：
            1.只有ikey在map存在时才会执行后面的函数式逻辑；和computeIfAbsent相反； 
        merge()
    8.关于entryset()方法：
        1.该方法返回一个set集合，元素类型为Map.Entry<K, V>，Map.Entry为Map中的静态内部类，一个Map.Entry中存储一个键值对的k和v；
        2.通过Map.Entry类型的实例对象即可获取该键值对的k和v：getKey()、getValue()；同时也可以设置该节点的value：setValue();

6.HashMap的遍历：
    1.forEach直接遍历：
        hm.forEach((key,value)->{
            System.out.println(key+"->"+value);
        });
    2.foreach+entryset遍历：
        for(Map.Entry<String,String> entry : hm.entrySet()) {
            System.out.println(entry.getKey()+"->"+entry.getValue());
        }
    3.foreach+keySet遍历：
        for(String key : hm.keySet()) {
            System.out.println(key+"->"+hm.get(key));
        }

    4.entrySet+forEach遍历：
        hm.entrySet().forEach((entry)->{
            System.out.println(entry.getKey()+"->"+entry.getValue());
        });
    5.keySet+forEach遍历：
        hm.keySet().forEach((key)->{
            System.out.println(key+"->"+hm.get(key));
        });

    6.iterator+entrySet遍历：
        Iterator<Map.Entry<String, String>> iterator = hm.entrySet().iterator();
        while (iterator.hasNext()) {
            Map.Entry entry = iterator.next();
            System.out.println(entry.getKey()+"->"+entry.getValue());

        }
    7.iterator+keySet遍历：
        Iterator<String> iterator = hm.keySet().iterator();
        while (iterator.hasNext()) {
            String key = iterator.next();
            System.out.println(key+"->"+hm.get(key));
        }
    8.iterator+keySet遍历：
        Iterator<Map.Entry<String,String>> iterator = hm.entrySet().iterator();
        while (iterator.hasNext()) {
            Map.Entry entry = iterator.next();
            System.out.println(entry.getKey()+"->"+hm.getValue());
        }

7.HashMap实现原理：
    1.HashMap底层数据结构：
        1.JDK1.8底层使用数组+(链表/红黑树)实现；数组作为hash桶，用来确定一个元素的桶位；链表和红黑树用来解决hash冲突的问题；
    2.HashMap增加元素过程：
        插入方法为put()方法，其底层则调用了putVal()方法，具体插入操作均在putVal()方法中实现；具体流程如下：
        1.首先检测表示hash桶的数组是否已经初始化，如果数组长度为0或者数组为null，则先调用resize方法进行扩容；
        2.计算key的hash值，如果key为null，则返回0，否则调用key的hashCode()方法获取key的hash值，并与该hash值无符号右移16位的值进行异或操作得到最终的hash值；
        3.使用key计算得到的hash值与数组进行取余操作，确定key-value应该放入hash桶的位置，即数组的下标；
        4.检测该数组下标对应位置是否已经有值，如果没有值则直接将该k-v放入该位置，如果有值则进行一下判断：
            1.检测该位置元素hash值与key值是否与当前待插入元素相同，如果相同，则直接使用该新值覆盖旧值；
            2.如果1没有匹配，那么继续检测当前位置节点是否是TreeNode类型，即当前位置出现hash冲突的元素是否已经树化为红黑树，如果是则将该k-v封装为一个TreeNode添加至红黑树中；
            3.如果2没有匹配，那么表示当前位置出现hash冲突的元素是通过链表来组织的，则开始遍历当前位置的链表：
                1.遍历过程中，如果出现hash值与key值都和当前待插入元素相同的元素，则直接使用新值覆盖旧值；
                2.如果链表遍历完成之后，则将该待插入元素封装为一个Node节点添加至链表尾部；然后检测当前链表中元素个数是否大于树化阈值-1，如果满足树化条件，则进行树化；
        4.调用钩子方法afterNodeAccess()，在HashMap中该方法没有具体实现，无实际功能；
        5.modCount加1，表示该Map已经被修改，方便遍历该Map的线程快速失败；
        6.表示Map元素总数的size加1，并与扩容阈值进行比较，如果size已经大于扩容阈值，则调用resize方法进行扩容；
        7.调用afterNodeInsertion()钩子方法，在HashMap中该方法没有具体实现，无实际功能；
    3.HashMap扩容过程：
        HashMap的扩容过程在resize()方法中实现；具体流程如下：
            1.检测旧数组长度是否已经大于0，如果已经大于0则说明已经至少扩容过一次，将继续进行一下检查：
                1.如果旧数组容量已经大于等于数组最大容量MAXIMUM_CAPACITY(2^30)时，直接将扩容阈值设置为Integer.MAX_VALUE(2^32)，然后直接返回旧数组容量，即不再扩容；
                2.如果旧数组容量小于数组最大容量，则将新容量和新扩容阈值设置为旧容量和旧阈值的2倍；
            2.如果当前旧数组的长度为0，并且扩容阈值大于0，则表示当前map还未进行扩容，并且手动制定了初始容量；则将扩容阈值大小赋值给数组容量；
            3.如果当前旧数组长度为0，并且扩容阈值为0，则说明当前map还未进行初始化，并且未指定初始容量和扩容阈值，则使用默认长度作为新数组长度，并使用默认扩容因子与默认数组长度计算新的扩容阈值；
            4.检测新扩容阈值是否为0，如果为0，则使用扩容因子和新的数组容量计算得出扩容阈值并赋值给新的扩容阈值；正常情况下，只有首次初始化，并且手动指定初始容量时才需要计算新的扩容阈值；
            5.使用新的数组容量值创建新的数组，并遍历旧数组，将旧数组中的元素重新计算桶位并添加新数组中；
                1.如果当前桶位只有一个元素，则重新计算该元素的位置，并重新设置即可；
                2.如果当前桶位已经树化为红黑树，那么拆分红黑树，必要时退化为链表，并对每一个元素重新分配位置；
                3.如果当前位置存储的是一个链表，则遍历链表，重新计算并挪动元素位置；
    4.HashMap中的细节：
        1.HashMap为何要同时使用链表和红黑树解决hash冲突？
            1.在直接使用链表解决hash冲突时，如果hash冲突较为严重，数组位置上的链表将会过长，将会导致元素的插入和查找时间复杂度趋于O(n)，效率降低；
            2.如果直接使用红黑树解决hash冲突时，在hash冲突不严重的情况下，导致元素的插入和查找时间复杂度保持在O(log(n))，并且插入和修改以及删除元素时还需要额外维护红黑树的平衡，因此效率同样会降低；
            3.HashMap则动态的使用两种策略解决hash冲突，当单个链表长度不超过8时，使用链表解决hash冲突，保持较高的查询和插入效率；当单个链表长度超过8时，使用红黑树解决hash冲突，保证在hash冲突严重的情况下也能保持O(log(n))的复杂度，不至于退化值O(N)；
            
        2.HashMap中各项默认值？
            1.数组初始容量默认为16；
            2.扩容因子默认为0.75；
            3.数组最大容量为2^30；
            上述三个默认值均为static final类型，不可更改；

        3.HashMap树化阈值？
            链表树化为红黑树时有两个条件：1.树化阈值，2.最小树化容量；
            1.树化阈值：
            将链表转换为红黑树的边界条件，默认为8，即链表中元素超过8个将会把链表转换为红黑树；
            取值依据：
                首先链表在长度较短时其增删改查性能都是比较好的，因此尽量先使用链表。如果hashcode离散型比较好比较均匀时，一个链表中的元素要超过8个的概率非常小，所以设置为8已经能够满足大多数场景需求；
            2.最小树化容量：
            除过树化阈值以外还有一个限制即最小树化容量，该值默认为64，即数组容量超过64时，且链表长度超过树化阈值时才会进行树化；
            参数意义：在数组容量较小时发生hash冲突的概率比较大，因此会优先选择扩容，而不是树化；该参数用来确定扩容还是树化的边界；该值固定为64，static final类型，不可修改；
            3.非树化阈值：
                当红黑树的元素个数小于非树化阈值时，将会由红黑树退化为链表；该值默认为6；static final类型，不可修改；
        4.HashMap中的树化阈值为何是8？为何树化时要减1，而非树化时要加1？
            1.8是一个实验值，在hash离散型较好的时候，单个链表中元素个数超过8个概率极小，所以设置为8即可满足大多数场景；
            2.树化要减1，非树化要加1是缓冲树化和非树化的频率，如果固定为8，那么可能发生频繁的树化和非树化；
        5.HashMap中计算keyhash值的细节？
            1.得到hash值的流程：
                1.首先调用key的hashcode方法，获取key的hash值，如果key没有重写hashcode方法的话，那么直接调用的就是Object的hashcode方法；
                2.将得到key的hash值进行无符号右移16位，然后再与hash值本身进行异或运算；
            2.该方法的设计思路：
                1.之所以不直接使用key的hashcode值，而是先右移16位然后进行异或运算，原因和计算key在数组中的位置有关，目的在于充分混合key的hash值的高16位和低16位，降低hash冲突的概率；
        6.关于确定key在数组中位置的流程细节：
            1.计算key在table中的位置都是通过数组长度与keyhash值进行取余确定的；但是HashMap中并不是直接使用取余运算，而是通过key的hash值和数组容量-1得到的值进行与运算来得到余数；
            2.由于数组长度通常较小，在转换为二进制之后，高位通常为0，那么与hash值进行运算之后会抹掉hash值的高位特征，这样在高位不同，低位相同时，将会大大增加hash冲突的概率；
            3.所以为了避免在高位不同，低位相同时导致hash冲突的概率增加，因此在计算key的hash值时会右移16位，将hash值得高16位特征与低16位特征进行混合；
            4.之所以选择将高16位与低16位进行相异或，而不是相与或者想或，是因为相与运算结果趋于0，相或运算结果趋于1，混合会偏向一方的特征，所以采用异或运算，保证充分混合；
        7.HashMap中数组长度为何必须是2的次幂？
            和计算key在数组中的位置有关，在计算key在数组中的位置时会使用key的hash值和数组长度-1进行与运算得到key在数组中的位置；只有数组长度为2的n次幂时，该计算方式才能得到正确的结果；
        8.HashMap扩容时为何要扩容为旧容量的2倍？
            1.首先HashMap中的容量必须始终保持为2的次幂；
            2.其次进行扩容要保证在满足使用条件的情况下尽可能的小，不能浪费太多空间；
            那么扩容为旧容量的2倍是刚好能够做到扩容之后数组容量仍然为2的次幂，同时又是大于旧容量的最小值；
        9.HashMap中扩容因子为何是0.75？
            该值是一个实验值，hashmap散列较为均匀的情况下，该值的大小能够保证数组合理的进行扩容，如果该值过大，那么将导致扩容阈值变大，最终可能导致hash冲突增多，如果该值较小，那么将导致扩容阈值变小，引起频繁扩容，导致性能下降；
        10.关于HashMap的快速失败机制？
            1.快速失败机制是指一个线程在遍历map期间，如果另一个线程将map中的key删除/新增时，遍历过程将会立即抛出异常，不会再继续遍历；
            2.之所以要有快速失败机制，是因为HashMap并非线程安全类型，那么在多线程环境下，一个线程在遍历map的过程中另一个线程将数据删除/或者新增，将导致遍历出的结果不准确，需要有快速失败机制终止遍历过程；
            2.实际实现时是通过modCount这个全局变量实现的，在遍历时会将该变量复制一份为mc，然后在每次遍历时都先比对modCount和mc是否保持相同，如果不同则表示有线程更新了map，需要终止遍历；
        11.HashMap并非线程安全，如何应用在多线程环境中：
            1.可以使用Collections工具类将HashMap包装为一个线程安全的HashMap，但是包装的原理实际上是重新封装同名方法，并给同名方法添加synchronized关键字；此种方式效率较低；
            2.也可以使用Hashtable，该类也是一个线程安全的Map类，但是其实现线程安全的方式同样是通过为方法添加synchronized关键字；因此同样效率较低；
            3.可以使用ConcurrentHashMap，该Map本质上是一个线程安全的Map集合，而且其采用CAS以及为数组头结点加锁的方式降低锁粒度，提高并发度；
