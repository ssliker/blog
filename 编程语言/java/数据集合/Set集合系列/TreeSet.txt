1.TreeSet特征：
    1.属于数据结构中的集合，用来存储数据值本身；
    2.TreeSet中的元素按照大小顺序排序、不可重复、可为null，具有自动去重功能；
    3.TreeSet未做任何同步措施，因此不可直接使用于多线程环境下的共享变量；
    4.TreeSet通过TreeMap实现，因此TreeSet存储元素的个数等于TreeMap中可容纳key的个数，最多为Integer.MAX_VALUE-1；

2.TreeSet继承结构：
    1.继承结构图
    --->HashSet--->AbstractSet--->Set--->Collection
               --->AbstractSet--->AbstractCollection--->Collection
    2.继承结构说明：
        1.通过继承结构图即可看到TreeSet所属类型；

3.TreeSet实现原理：
    1.TreeSet底层通过TreeMap来实现，TreeSet中的元素会被当做TreeMap中的key，指向一个Object对象，存储在TreeMap中；
    2.TreeSet复用了TreeMap中key不能重复的特征实现value的自动去重功能：由于TreeMap是一个树结构，key是按照大小顺序排序的，因此TreeSet中的value默认也是按照大小顺序排序的；
    3.TreeSet中对value的操作本质上都是TreeMap中对key的操作；
    整体上，TreeSet就是一层TreeMap的封装；

4.构造方法：
    1.创建一个空的TreeSet：
        TreeSet set = new TreeSet();
    
    2.自定义一个比较器创建treeSet：
        TreeSet(Comparator<? super E> comparator)
    
    3.使用其他Collection作为参数创建一个TreeSet：
        TreeSet set = new TreeSet(Collection<? extends E> c)
    
    备注：TreeSet本质上是通过TreeMap作为底层存储结构创建的实例对象；

5.TreeSet提供的功能方法：
    1.增加元素：
        add(Object o)：
            1.调用TreeMap的put()方法实现；
            2.会将待添加元素o作为TreeMap的key，然后创建一个Object对象作为key的值存储在TreeMap中；
            3.如果o对应的key已经存在，那么添加失败，返回false，否则返回true；
    2.删除元素：
        remove(Object o)：
            1.调用TreeMap的remove()方法实现；
            2.会将待删除的元素o作为TreeMap中待删除的key，查找该key是否存在，如果存在则在TreeMap中删除该key；
            3.如果删除成功赶回true，否则返回false；
    3.查找元素是否在集合中存在：
        contains(o):
            1.调用TreeMap的containsKey()方法实现；
            2.会将待查找元素作为TreeMap的key，然后再TreeMap中查找该key是否存在；
    4.获取集合本身信息：
        1.集合元素个数：
            size()：调用TreeMap的size()方法实现；
        2.集合是否为空：
            idEmpty()：调用TreeMap的isEmpty()实现；
    5.TreeSet相比于HashSet和LinkedHashSet多了一些跟排序有关的方法：
        1.first()：返回set中的第一个元素；
        2.last()：返回set中的最后一个元素；

        1.lower(E e) :返回小于等于e且离e最近的元素
        2.higher（E e）:返回大于等于e且离e最近的元素

        1.floor(E e)：返回小于e且离e最近的元素；
        2.ceiling(E e)：返回大于e且离e最近的元素；
        
        1.pollFirst()：删除并返回第一个元素；
        2.poolLast()：删除并返回最后一个元素；