1.SringUtils说明：
    1.apache在commons-lang包下提供的字符串处理类库，提供了较多的字符串处理静态方法；
2.引入依赖：
    1.使用commons-lang3
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.9</version>
        </dependency>

    2.使用commons-lang：
        <dependency>
            <groupId>commons-lang</groupId>
            <artifactId>commons-lang</artifactId>
            <version>2.6</version>
        </dependency>
3.相关功能：
    1.判空类：
        1.isEmpty(String str)：检测是否为空：如果为null或者长度小于等于0即返回true，否则返回false；
        2.isBlank(String str)：检测是否为空：如果为null或者长度小于等于0或者为纯空白字符(\r,\n,\f,空格)即返回true，否则返回false；
        3.isNotEmpty(String str)：检测是否不为空，isEmpty()反向操作；不为null且长度大于0即返回true，否则返回false；
        4.isNotBlank(String str)：检测是否不为空，isBlank()反向操作；不为null且长度大于0且元素不能为纯空白字符即返回true，否则返回false；
    
    2.空白字符过滤：
        1.trim(String str)：去除两侧控制字符(\r\n\f\b\t)，如果输入null，则返回null；
        2.trimToNull(String str)：去除两侧控制字符(\r\n\f\b\t)，如果输入为null，则返回null；
        3.trimToEmpty(String str)：去除两侧控制字符(\r\n\f\b\t)，如果输入为null，则返回""；
        4.strip(String str)：去除两侧空白字符(\t\n\f\r)，如果输入null，则返回null；
        5.stripToNull(String str)：去除两侧空白字符(\t\n\f\r)，如果输入null，则返回null；
        6.stripToEmpty(String str)：去除两侧空白字符(\t\f\r\n)，如果输入null，则返回""；
        7.strip(String str,String waitStripStr)：去除str两侧在waitStripStr中存在的字符；
        8.stripStart(String str, String waitStripStr)：去除str左侧在waitStripStr中存在的字符；
        9.stripEnd(String str, String waitStripStr)：去除str右侧在waitStripStr中存在的字符；
    
    3.字符串返回值：
        StringUtils.defaultIfBlank(String str, String defaultStr)：如果str为null，或者长度为0，或者是纯空白字符，则返回defaultStr；
        StringUtils.defaultIfEmpty(String str, String defaultStr)：如果str为null，或者长度为0，则返回defaultStr；
        StringUtils.defaultString(String str, String defaultStr)：如果str为null，返回defaultStr；
    
    4.存在检测类：
        1.前缀检测
            1.startsWith(CharSequence sequence, CharSequence prefix)：检测str是否已straim开头；
            2.startsWithAny(CharSequence sequence, CharSequence... searchStrings)：检测字符串sequence是否已searchStrings中的某一个字符串开头；
            3.startsWithIgnoreCase(CharSequence str, CharSequence prefix)：忽略大小写检测字符串str是否以prefix开头；
        2.后缀检测
            1.endsWith(CharSequence sequence, CharSequence prefix)：检测str是否已straim结尾；
            2.endsWithAny(CharSequence sequence, CharSequence... searchStrings)：检测字符串sequence是否已searchStrings中的某一个字符串结尾；
            3.endsWithIgnoreCase(CharSequence str, CharSequence prefix)：忽略大小写检测字符串str是否以prefix结尾；
        3.存在性检测：
            1.contains(CharSequence seq, int searchChar)：检测字符是否在字符串seq中存在；
            2.contains(CharSequence seq, CharSequence searchSeq)：检测子串searchSeq是否在seq中存在,区分大小写；
            2.containsIgnoreCase(CharSequence seq, CharSequence searchSeq)：检测子串searchSeq是否在seq中存在，不区分大小写；
            3.containsWhitespace(CharSequence seq)：检测子串seq是否存在空白字符；
            4.containsAny(CharSequence cs, CharSequence searchChars)：检测cs中是否包含searchChars中的字符；
            5.containsAny(CharSequence cs, CharSequence... searchCharSequences)：检测cs中是否包含searchCharsSequences中的某个字符；
            6.containsNone(CharSequence cs, char... searchChars)：检测cs中是否不包含searchars中的某个字符；
            7.containsNone(CharSequence cs, String invalidChars)：检测cs中是否包括invalidChars中的某个字符；
        
    5.获取长度：
        StringUtils.length(CharSequence cs)：获取cs的长度；
    
    6.大小写切换：
        StringUtils.swapCase(String str))：大小写取反；
        StringUtils.lowerCase(String str))：大写转小写；
        StringUtils.upperCase(String str))：小写转大写；
        StringUtils.capitalize(String str)：首字母切换为大写；
    
    7.等值检测类：
        1.equals(String str1, String str2)：区分大小写检测str1和str2是否相等，如果相等则返回true，否则返回false，如果str1和str2都为null也返回true;
        2.equalsIgnoreCase(String str1, String str2)：不区分大小写检测str1和str2是否相等，如果相等则返回true，否则返回false，如果str1和str2都为null也返回true；
    
    8.字符串比较：
        1.compare(String str1, String str2)：比较str1和str2是否相等，不区分大小；
        2.compareIgnoreCase(String str1, String str2)：比较str1和str2是否相等，不区分大小；
    
    9.字符串截取：
        1.substring(String str,int start)：截取str中start之后的字符串，包括start位置的字符；
        2.substring(String str,int start,int end)：截取str中start与end之间的字符串，包括start，不包括end；
        3.substringAfter(String str,String spliter)：截取str中首次匹配到的spliter之后的字符串，不包括spliter；
        4.substringBefore(String str,,String spliter)：截取str中首次匹配到的spliter之前的字符串，不包括spliter；
        5.substringBetween(String str, String open,String close)：截取str中open和close区间的字符串；不包括open和close；
        6.right(String str, int len)：截取字符串str后len个字符作为一个字符串；
        7.left(String str, int len)：截取字符串str前len个字符作为一个字符串；
        8.mid(String str, int pos, int len):从str中间pos位置开始，截取长度为len的子串并返回；
    
    10.字符串分割：
        1.split(String spliter)：使用spliter分割字符串，返回字符串数组，默认情况下spliter为空白字符，如果被分割字符串为""，则返回{}，如果被分割字符串为null，则返回null；
    
    
    
