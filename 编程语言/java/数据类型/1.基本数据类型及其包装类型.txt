1.关于基本数据类型、包装类型和大数类型：
    1.关于java中的基础数据类型：
        1.java中提供了整型、浮点型、布尔型、字符类型四种基本数据类型；
        2.由于基本数据类型无法使用在面向对象的某些场景下，因此，java还提供了四种基本类型对应的包装类型；
        3.由于基本数据类型表示的数据大小有上下范围限制，对于超出上下限范围的数字基本类型无法表示，因此，java针对整型和浮点型分别提供了大数字类型；
    2.关于数据类型的理解：
        1.数据类型只是一个虚拟概念，并不真实存在，仅仅用来表示一个数据的数学特征，即该数据能够参与什么运算，如何进行运算；
        2.在程序中，一方面数据类型起到确定数据占用存储空间大小的作用，保证在存储数据是能够分配足够的空间，在读取数据时能够完整的读取数据；
        3.在程序中，另一方面数据类型起到确定数据如何存储以及如何读取的作用，因为整数和浮点数在内存中以不同的方式存储和读取，因此具体的读写方式需要根据数据类型来确定；
    3.关于字面量和数据类型：
        1.数据类型是用来表示数据数学特征的一种标记，并且在程序中用来确定数据存储空间的大小和读写方式；
        2.字面量是指某一种数据类型的确切数据值；
        
2.关于基本类型数据：
    1.整数类型：
        1.关于整数类型表示范围：
            1.整数数据类型取值范围包括：正整数、0、负整数；
        2.整数类型根据存储空间大小分为以下四种类型：
            |--byte：大小：1个字节；8位；范围：2^8~2^8-1(-128~127)
            |--short：大小：2个字节；16位；范围：2^16~2^16-1(-32768~32767)
            |--int：大小：4个字节；32位；范围：-2^32~2^32-1(-2147483648~2147483647)
            |--long：大小：8个字节；64位；范围：-2^^64~2^64-1(最大位数：19位，2高位：92)
        3.关于整数字面量：
            1.java中，默认整数字面量的类型为int类型；
            2.将byte、short范围内的整数字面量赋值给byte、short类型的变量时，jvm会将该字面量当做byte、short类型对待；
            3.赋值给long型变量的字面量，需要带上l或L后缀；
            4.字面量赋值给变量时必须注意是否超过该变量类型所容纳的范围，直接赋值发生溢出之后将直接报错；
            5.表达式计算所得结果赋值给变量时要注意是否会发生溢出，发生溢出之后将会从该变量类型数值范围的最小值开始从新计数；
        4.关于整数间进制及转换：
            1.java支持以二进制、八进制、十进制、十六进制的格式表示整数字面量；
            2.java中不同进制的整数字面量格式：
                1：二进制以0b或者0B作为前缀，由0和1组成；
                2：八进制以0作为前缀，由0~7组成；
                3：十进制无任何前缀，由0~9组成；缀，由0~9组成；
                4：十六进制以0x或者0X作为前缀，由0~9和a~f(A~F)组成；
            3.java中不同进制的转换：
                1.十进制转其他进制：
                    十进制转二进制字符串：Integer.toBinaryString(num)
                    十进制转八进制字符串：Integer.toOctalString(num)
                    十进制转十六进制字符串：Integer.toHexString(num)
                    十进制转r进制字符串：Integer.toString(进制数,num)
                    注意：
                        1.num只能是十进制整数；否则将发生异常；
                2.其他进制字符串转十进制：
                    Integer.parseInt(String num, int radix)
                    注意：
                        1.num只能是其他进制的字符串，且不能带进制前缀，否则将发生异常；
                        2.redis是十进制整数，表示num的原始进制；

            4.进制转换注意事项：
                1.进制转换只能以十进制作为中间进制转换；
                2.进制转换必须要处理转换出错的异常情况；
        5.类型检测和转换：

    2.浮点数类型：
        1.关于浮点数：
            即小数，包括负小数、0.0、正小数；
        2.浮点数精度：  
            1.浮点数在实际存储时采用除2取余法计算得到对应的二进制数值，在遇到无法被2整除的情况下将会产生循环小数，但是内存空间有限，必须对小数部分进行截取并进行四舍五入处理，小数部分被截取的位数称为浮点数的精度，同时因为小数部分的截取和四舍五入也会导致实际存储的小数和表示的小数不同；
        3.关于浮点数类型：
            |--float:大小：4字节，精度：7位，小数位数超过7位的浮点数将会从第7位开始截取并进行四舍五入处理；
            |--double:大小：8字节，精度：16位，小数位数超过16位的浮点数将会从第16位开始截取并进行四舍五入处理；
        4.浮点数字面量：
            1.java中默认小数都是double类型的浮点数，因此直接将浮点数赋值给float类型的变量将会报错；
            2.在将浮点数赋值给float类型的变量时，数字后面必须携带f或者F后缀；
            3.浮点数字面量的表示形式有两种：1.通过小数形式：1.23；2.通过科学计数法表示：0.232E10；    
            4.java中特殊的浮点数字面量：POSITIVE_INFINITY(正无穷大)、NEGATIVE_INFINITY(负无穷大)、NAN(非数)；
        
        5.关于正无穷、负无穷、非数；
            1.正浮点数除以0，得到正无穷大，负浮点数除以0得到负无穷大，对负数进行开方运算、0.0除以0.0或者改变量值不是数字类型将会成为NAN；特别注意：只有正负浮点数除以0才会是正负无穷大，整数除以0将会报除0异常；
            2.正无穷永远等于正无穷，负无穷永远等于负无穷，但是非数和任何值都不相等，包括和自己都不相等；

    3.布尔类型：
        1.布尔类型：
            java中使用boolean作为布尔类型的标识符，大小只有1个字节，8位；

        2.布尔类型字面量：
            1.布尔类型只有固定的两个字面量：true和false；
            2.注意布尔值得书写，必须是全小写的true和false，其余字符都是非法字符；
        
        3.布尔值的使用：
            1.布尔值通常都是使用在条件表达式中，用来判断条件是否满足的；
            2.java在条件表达式中并不会将其他数据类型自动转换为布尔值，比如0、NAN、空集合、空字符串等；条件表达式中必须明确的得到或者给定一个布尔值；
        
    4.字符类型：
        1.关于字符类型：
            1.字符类型使用char表示；
            2.char大小：2个字节；16位；范围：0~65535(2^17)，因此其只能表示65535个字符；
            3.java中使用unicode字符集，并使用UTF8编码，unicode中码值超过65535的字符将会使用2个char表示，即四个字节表示一个字符；
        
        2.关于字符字面量：
            1.字符字面量包括两种：普通字符、转义字符；
            2.普通字符表示字符集中的可打印字符；即用''包裹的字符：'a'、'b'、'+'等；
            3.转义字符表示字符集中的非打印字符，如：'\r','\n','\t','\v','\\','\'','\"','\b'等；
            4.字符在内存中实际存储的是字符在字符集中对应的码值，即小于65535的一个整数，因此可以直接使用一个Short范围内的整数表示一个字符字面量；
        
        3.关于字符集和字符编码：
    
    5.关于基本数据类型的使用：
            1.基本数据类型仅仅表示一种数据类型，不具备任何面向对象特征；因此在使用基本类型时要注意两个事项：
                1.基本类型不能使用在需要引用类型的场景：如当前变量需要容纳null、当前数据要用在泛型场景中；
                2.其运算方式和引用类型的运算有较大差异：如算术运算、比较运算；基本类型不能直接和引用类型同时参与运算；
            2.通常情况下建议局部变量(形参、方法内局部变量、代码块内局部变量)使用基本数据类型；
    
2.包装类型：
    1.为何需要包装类型：
        1.由于java是一个面向对象的编程语言，编程时需要以面向对象的方式进行，如果需要使用到面向对象的特征，那么要求数据类型必须是引用类型；
        2.对于基本数据类型而言，并不具备任何面向对象的特征，因此在某些面向对象的场景中将无法使用，如泛型、null；
    
    2.java中的包装类型：
        整型包装类型：和整型基本数据类型相对，有以下四种：
            |--Byte：表示byte类型的包装类型；
            |--Short：表示short类型的包装类型；
            |--Integer：表示int类型的包装类型；
            |--Long：表示long类型的包装类型；

        浮点型包装类型：和浮点型基本数据类型相对，有以下两种：
            |--Float：表示float类型的包装类型
            |--Double：表示double类型的包装类型

        字符型包装类型：
            |--Short：表示short类型的包装类型；
        
        布尔包装类型：
            |--Boolean：表示boolean类型的包装类型；

    3.包装类型的实现原理：
        1.包装类型本质上是一个普通的对象，只是在该对象中定义了一个value属性来存储该对象表示的数值；每一个包装类型变量表示的数值就是该value属性的值；
    
    4.关于装箱和拆箱：
        1.基本类型转换为包装类型称为装箱；包装类型转换为基本类型称为拆箱；
        2.装箱和拆箱有两种方式：
            1.手动装箱和拆箱：
                装箱：new 包装类(数据值)
                    说明：
                        1：包装类即为上述包装类型；
                        2：装箱之后将得到引用类型的数据；
                拆箱：包装类型数据.xxxValue()
                    说明：
                        1：xxxValue，指不同数据类型，如：intValue()、floatValue()
                        2：拆箱之后将得到基本类型的数据；

            2.自动装箱和拆箱：
                1.在JDK1.5之后，jvm能够自动进行装箱和拆箱；因此带来以下便利：
                    1.可以将基本数据类型的值直接赋值给包装类型的变量；
                    2.可以将包装类型的值直接赋值给基本类型的变量；
                    3.包装类型可以和基本类型直接进行运算；

    5.JVM对装箱的优化：
        1.优化措施：java对包装类型做了缓存优化，在程序启动时，jvm会提前创建指定数值范围数值对应的包装类型对象，具体范围如下：
            1.对于Short、Integer、Long：
                jvm会提前创建好数值大小范围在[-128,128]之间的包装对象；
            2.对于Character：
                jvm会提前创建好码值大小范围在[0,128]之间的包装对象；
            3.对于Boolean：
                系统会提前创建好true和false值；
            4.对于Float和Double：
                jvm并不会提前创建这两种类型数值对应的包装对象，因为在任意两个浮点数值之间有无数非值，无法进行有效的优化；
        2.优化措施对使用的影响：
            1.在使用时，如果待装箱的数值在JVM对装箱的优化数值范围内时，将不会再创建该数值对应的包装对象，无论该数值装箱多少次均返回同一个包装对象的引用；如:
                Integer a = 12;
                Integer b = 12;
                if (a == b)：true；
            2.如果待装箱的数值不在JVM对装箱优化的数值范围内时，每次装箱都会新创建一个包装类对象；如：
                Integer a = 212;
                Integer b = 212;
                if (a == b)：false；

    6.使用包装类型时的注意事项：
        1.关于大小比较：
            1.由于包装类型是引用类型，每一个包装类型都重写了compareTo方法，因此禁止使用>、>=、<、<=进行大小比较，而是使用compareTo()方法进行大小比较；
        2.关于等值比较：
            1.由于jvm对包装类型有优化，当数值范围不在优化数值范围内时总是会新建对象，因此禁止使用==或者!=来进行包装类型的等值比较；而是使用equals()方法进行等值比较；
        3.关于自动拆箱：
            1.本质上仍然调用包装对象的xxxValue方法获取该包装对象的value属性值；因此在自动拆箱或者手动拆箱时，一定且必须要先验证该包装对象是否为null；

    7.包装类型提供的API：
        1.实例方法：
            1.大小比较：
                1.由于包装类型是引用类型，每一个包装类型都重写了compareTo方法，因此禁止使用>、>=、<、<+进行大小比较，而是使用compareTo()方法进行大小比较；
            2.等值比较：
                1.由于jvm对包装类型有优化，因此禁止使用==或者!=来进行包装类型的等值比较；而是使用equals()方法进行等值比较；
            3.返回基本类型数据：
                1.包装类型中通过value属性存储具体的数值，value属性的呗private final修饰，因此不能直接访问value属性获取具体数值；
                2.每一个包装类都提供了xxxVlaue()方法来返回该包装对象表示的数值；
        
        2.静态方法：
            1.静态属性：
                1.当前类型最大值：MAX_VALUE
                2.当前类型最小值：MIN_VALUE
            
            2.创建包装类对象：valueOf()
                1.对于包装类型对象，不仅仅可以通过构造方法创建，同时也可以通过静态方法valueOf()创建：valueOf()；
                2.valueOf()方法有三种重载形式，其参数可以为数字、纯数字字符串、指定进制的纯数字字符串；
                3.该方法返回对应包装类型的实例对象；
                4.使用该方法时需要注意待转换值不能为null，且格式要正确，如有必要必须处理转换异常；
            
            3.获取基本类型数据：
                1.通过静态方法：parseXxxx()即可将一个纯数字字符串转换为该包装类型对应的基本类型数据；
                2.该方法有两种重载形式：其参数可以为纯数字字符串、指定进制的纯数字字符串；
                3.使用该方法时需要注意待转换值不能为null，且格式要正确，如有必要必须处理转换异常；

            4.转换字符串：
                1.通过静态方法：toString()即可将一个整数类型转换为String类型；

3.大数据类型：
    1.为何需要大数字类型：
        1.基本类型中，每一种数据类型都会有一个明确的数值大小范围，无论是整型还是浮点型，其能够表示的数据均有上下限；
        2.对于基本类型上下限以外的数字基本类型将无法表示；为了能够处理此种情况，java提供了以下两种大数类型：
            |--BigInteger：来表示更大的整数
            |--BigDecimal：来表示更大的浮点数；
    2.关于BigInteger和BigDecimal：
        1.BigInteger和BigDecimal本质上都是通过字符串来实现大数字的存储和表示，没有固定字节数的限制，其可以表示任意大小的数字；
        2.虽然大数字类型不再受到固定字节数的限制，但是由于其本质上是通过字符串实现，因此其数字位数受到jdk中字符串长度的限制，并且由于字符串在编译期和运行期长度限制并不同，因此BigInteger和BigDecimal编译期和运行期所能够表示的数字位数也不相同；
        3.BigInteger和BigDecimal虽然都表示一个数字，但是并不能和普通的整数类型或者浮点数类型同时参与运算；有以下几个方面的限制：
            1.只能和自身类型相同的数据进行运算，不能直接和基本类型或者其他引用类型数据进行运算；
            2.不能直接使用运算符号(+、-、*、/)进行运算,只能使用jdk为大数类型增加的运算方法；
            3.不能直接使用运算符号(>、>=、<、<=)进行比较运算，只能通过compareTo()方法进行比较运算；
            4不能直接使用运算符号(==、!=)进行等值比较，只能通过equals()方法进行比较；
    
    3.关于BigInteger:
        1.BigInteger的创建：
            1.通过构造方法创建：
                BigInteger bigInteger = new BigInteger();
            备注：该构造方法有多种重载形式，常用的包括String和其他数组类型的参数，但是实际使用时推荐使用String类型的参数；
            **预留问题：其他构造方法参数形式以及使用方式；

            2.通过valueOf()方法创建：
                BigInteger.valueOf(long value);
            备注：该方法只接受一个long类型的参数；

        2.BigInteger的运算：
            BigInteger不能直接使用jdk提供的运算符号进行运算；只能使用BigInteger提供的运算方法进行运算：
            1.加减乘除运算；
                加法运算：add(BigInteger big)
                减法运算：subtract(BigInteger big)
                乘法运算：multiply(BigInteger big)
                除法运算：divide(BigInteger big)
            
            2.比较运算：
                大小比较运算：compareTo(BigInteger big)
                等值比较运算：equals(BigInteger big)
            
            3.其他运算：
                1.取最大值：max(BigInteger big)
                2.取最小值：min(BigInteger big)
                3.取绝对值：abs(BigInteger big)
            
    3.关于BigDecimal:
        1.BigDecimal的创建：
            1.通过构造方法创建：
                BigDecimal bidc = new BigDecimal();
            备注：
                1.该构造方法有多种重载形式，常用的包括以下数据类型：String，int、long、BigInteger；
                2.实际使用时，禁止使用double类型的参数，否则参数本身就已经导致数据精度不准，推荐使用String类型的参数；

            2.通过valueOf()方法创建：
                BigDecimal.valueOf();
            备注：1.valueOf支持String、long、BigInteger三种形式的参数，推荐使用String类型的参数；
                 2.此种方式以double类型为参数时和以double类型为参数的构造方法并不相同，本质上是通过String创建的，因此仍然能够保证精度准确；

        2.BigDecimal的运算：
            BigDecimal不能直接使用jdk提供的运算符号进行运算，只能使用BigDecimal类本身提供的运算方法进行运算：
            1.加减乘除运算：
                加法运算：add(BigDecimal big)
                减法运算：subtract(BigDecimal big)
                乘法运算：multiply(BigDecimal big)
                除法运算：divide(BigDecimal big)
            
            2.比较运算：
                大小比较运算：compareTo(BigInteger big)
                等值比较运算：equals(BigInteger big)
            
            3.其他运算：
                1.取最大值：max(BigInteger big)
                2.取最小值：min(BigInteger big)
                3.取绝对值：abs(BigInteger big)