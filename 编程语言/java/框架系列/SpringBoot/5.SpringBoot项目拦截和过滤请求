1.关于过滤器：
    1.过滤器概述：
        1.过滤器Filter的功能：可以对接收到的请求进行过滤；
        2.过滤器Filter的过滤范围：Filter是Servlet提供的接口，只能用在web环境中；并且会对所有进入到Servlet中的请求进行拦截，包括静态请求和动态请求；
        3.过滤器Filter的作用时机：请求进入Handler之前就会被过滤；
        4.过滤器Filter允许配置多个，此时：
            1.FilterChain会依次调用每一个Filter的doFilter方法对请求进行过滤；
            2.多个Filter可以指定执行顺序，按照指定的顺序对请求进行过滤；
        5.由于SpringMVC启动时会先创建spring容器，后创建Servlet容器，因此当Filter加载并初始化之后bean已经创建完成，所以Filter中可以注入bean；
        6.过滤器是基于函数回调实现的，即当前拦截器主动调用doFilter方法实现拦截器链式调用的；
    2.关于Filter接口：
        1.接口内容：
            public interface Filter {
                default void init(FilterConfig filterConfig) throws ServletException {
                }

                void doFilter(ServletRequest var1, ServletResponse var2, FilterChain filterChain) throws IOException, ServletException;

                default void destroy() {
                }
            }
        2.接口说明：
            1.init方法用来对过滤器进行初始化，在Servlet容器首次加载过滤器时会调用该方法；该方法必须执行成功，否则该过滤器将不会被加载；
            2.doFilter方法用来实现具体的过滤逻辑，如果过滤通过，那么必须在该方法中调用filterChain.doFilter()，将过滤器向下传递，否则将视为过滤不通过；
            3.destory方法用来在过滤器销毁之前执行，用来销毁资源；
        
        3.接口实现示例：
            1.实现过滤器：
                public class MyFilter implements Filter {
                    @Override
                    public void init(FilterConfig filterConfig) thorws ServletException {
                        System.out.println("Filter 初始化");
                    }

                    @Override
                    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException { 
                        System.out.println("Filter 过滤中");
                    }
                    // 过滤通过
                    filterChain.doFilter(ServletRequest, servletResponse);

                    @Override
                    public void destory(){
                        System.out.println("Filter 准备销毁");
                    }
                }
            2.注册过滤器
                1.对于SpringBoot
                    1.注册方式：
                        public FilterRegisterBean registerMyFilter() {
                            FilterRegisterBean filterRegisterBean = new FilterRegisterBean();
                            filterRegisterBean.setFilter(new MyFilter());  //配置过滤器
                            filterRegister.addUrlPatterns("/*"); //配置待过滤路径
                            filterRegister.InitParameter("paraName", "paraValue");
                            filterRegister.setName("myFilter");
                            return filterRegister;
                        }
                    2.执行顺序：
                        1.默认情况下，按照注册的代码顺序执行，注册代码在前面的优先执行；
                        2.可以通过在FilterRegisterBean中调用setOrder(int order)来设置执行顺序，整数越小，优先级越高；
                2.对于springMVC
                    1.注册方式：通过<filter-mapping>标签进行配置；
                    2.执行顺序：按照filter-mapping标签中的注册顺序执行过滤器；
            3.设置作用url:
                通过addUrlPatterns()方法设置当前过滤器允许过滤的URL；
                
2.关于拦截器
    1.拦截器概述：
        1.过滤器Intercepter的功能：可以对需要由Handler处理的请求进行拦截过滤；
        2.过滤器Intercepter的过滤范围：Intercepter是Spring提供的功能，能够用在除过web以外的其他类型程序中；只能够对需要由Handler处理的请求进行拦截
        3.过滤器Intercepter的作用时机：请求进入Handler处理之前、之后均会被拦截；
        4.过滤器Intercepter允许配置多个，此时：
            1.系统会依次调用每一个Intecepter的相关方法对请求进行过滤；
            2.多个Intercepter可以指定执行顺序，按照指定的顺序对请求进行过滤；
        5.特别注意一点：拦截器的加载是在spring容器创建之前完成的，因此拦截器中不同通过@Autowired注入bean；
        6.拦截器是基于反射实现的动态代理；

    2.关于Intercepter：
        1.接口内容：
            public interface HandlerInterceptor {
                default boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {
                    return true;
                }

                default void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, @Nullable ModelAndView modelAndView) throws Exception {
                }

                default void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, @Nullable Exception ex) throws Exception {
                }
            }
        2.接口说明：
            1.preHandle()：会在请求进入Handler之前执行，如果该方法返回false，表示请求已经被拦截，不再处理，并且其他的拦截器也不再执行，直接向客户端返回拦截结果。
            2.postHandle()：会在Handler处理请求并正常返回结果之后，DispatcherServlet返回渲染图之前执行；
            3.afterCompletion()：请求结束之后才会执行，即DispatcherServlet渲染了视图之后才会执行；
            4.上述方法中，preHandler会按照拦截器顺序执行，postHandler会按照拦截器顺序反向顺序执行；afterCompletion同样会按照拦截器顺序反向顺序执行；
        
        3.使用示例：
            1.创建Intercepter:
                public class Aitfa implements HandlerInterceptor {
                    @Override
                    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {
                        System.out.println("A-intercepter-preHandle");
                        return true;
                    }

                    @Override
                    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {
                        System.out.println("A-intercepter-postHandle");
                    }

                    @Override
                    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {
                        System.out.println("A-intercepter-afterCompletion");
                    }
                }
            
            2.注册Intercepter：
                @Override
                public void addInterceptors(InterceptorRegistry registry) {
                    registry.addInterceptor(new Bitfa()).addPathPatterns("/gu");  // 只拦截/gu
                    registry.addInterceptor(new Aitfa()).excludePathPatterns("/gu"); // 拦截除过/gu以外的所有url
                }

            3.执行顺序：
                1.默认按照在InterceptorRegistry中的注册顺序排序执行；
                2.可以在注册时通过order方法指定执行顺序，order中的整数越小优先级越高；
                2.也可以将Intercepter注册为bean，然后在Intercepter上通过@Order指定执行顺序，Order中的整数越小越先执行；    
            
            4.设置拦截url:
                拦截器由两种方式设置待拦截URL:
                    1.通过addPathPatterns()添加该拦截器要拦截的URL；
                    2.通过excludePathPatterns()添加当前拦截器不需要拦截的URL，除过不需要拦截的URL以外的URL都将被拦截；
