1.关于参数验证方式：
    1.手动进行参数的数据类型、内容格式、范围等进行验证；
    2.通过Validate进行验证；

2.通过Validate进行参数验证：
    1.引入Validation依赖：
        1.对于SpringBoot项目，可以通过starter启动器引入Javax.validation:
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-validation</artifactId>
                <version>2.3.3.RELEASE</version>
            </dependency>
        2.也可直接引入Javax.引入Validation依赖：    
            <dependency>
                <groupId>javax.validation</groupId>
                <artifactId>validation-api</artifactId>
                <version>2.0.1.Final</version>
            </dependency>
        注：通过上述引入的依赖均在：Javax.validation.constraints
    2.关于Validation提供的验证注解：
        参考：https://github.com/ssliker/blog/blob/master/tmp/Hibernate%20Validation%E6%95%B0%E6%8D%AE%E9%AA%8C%E8%AF%81.md
    
    3.关于web中使用Validator进行参数验证：
        1.参数验证注解：
            1.@Valid：遵守标准JSR-303规范，配合BindingResult可以直接提供参数验证结果；
            2.@Validated时Spring对@Valid的一层封装；
            3.在检验Controller的入参是否符合规范时，使用@Validated或者@Valid在基本验证功能上没有太多区别。但是在分组、注解位置、嵌套验证等功能上两个有所不同，具体如下：
                1.关于分组功能：
                    @Validated：提供了一个分组功能，可以在入参验证时，根据不同的分组采用不同的验证机制
                    @Valid：作为标准JSR-303规范，还没有吸收分组的功能。
        
        2.验证方式：
            1.方法参数验证：直接在方法参数上添加Validator相关注解进行验证；
            2.DTO验证：在DTO属性上添加Validator相关注解进行验证，并在方法参数位置使用@Validated注明要验证的DTO；
        
        4.验证信息获取：
            1.直接在方法中注入BindingResult来获取
                if (result.hasErrors()){
                    FieldError error = result.getFieldError();
                    if (error != null) {
                        System.out.println(error.getDefaultMessage());
                    }
                }
            2.通过切面配置BindingResult来获取：
                @Aspect
                @Component
                @Order(2)
                public class BindingResultAspect {
                    @Pointcut("execution(public * com.demo.test.controller.*.*(..))")
                    public void BindingResult() {
                    }

                    @Around("BindingResult()")
                    public Object doAround(ProceedingJoinPoint joinPoint) throws Throwable {
                        Object[] args = joinPoint.getArgs();
                        for (Object arg : args) {
                            if (arg instanceof BindingResult) {
                                BindingResult result = (BindingResult) arg;
                                if (result.hasErrors()) {
                                    FieldError fieldError = result.getFieldError();
                                    if(fieldError!=null){
                                        return CommonResult.validateFailed(fieldError.getDefaultMessage());
                                    }else{
                                        return CommonResult.validateFailed();
                                    }
                                }
                            }
                        }
                        return joinPoint.proceed();
                    }
                }
            3.通过统一异常处理来获取：
                @RestControllerAdvice
                public class ExceptionAdvice {

                    @ExceptionHandler(value = MethodArgumentNotValidException.class)
                    public String handlerValidException(MethodArgumentNotValidException exception) {
                        BindingResult bindingResult = exception.getBindingResult();
                        if (bindingResult.hasErrors()) {
                            FieldError error = bindingResult.getFieldError();
                            if (null != error) {
                                return error.getDefaultMessage();
                            }
                        }
                        return null;
                    }

                    @ExceptionHandler(value= BindException.class)
                    public String handlerBindException(BindException exception) {
                        BindingResult bindingResult = exception.getBindingResult();
                        if (bindingResult.hasErrors()) {
                            FieldError error = bindingResult.getFieldError();
                            if (null != error) {
                                return error.getDefaultMessage();
                            }
                        }
                        return null;
                    }
                }



