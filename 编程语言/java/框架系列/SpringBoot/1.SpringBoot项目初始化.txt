1.项目基本机构
    1.项目基本准则：
        1.一个项目应该由父项目和子模块共同构成，父项目用来对整个项目的依赖、模块、打包配置等进行管理，子模块则按照业务类型不同进行拆分；
        2.子模块中可以直接组织具体的代码结构，也可以按照需要继续按照父项目+子模块的模式进行组织；

    2.关于父项目：
        1.根部父项目是对整个项目的统一管理，子模块中的父项目只是对当前模块的统一管理；
        2.父项目只承担依赖及配置管理的功能，统一管理该父项目下所有子项目所需的依赖和版本号以及打包配置信息，不提供任何具体功能实现；
        3.因为父项目不提供任何具体功能实现，因此父项目的packaging类型均为pom；
        4.父项目和子项目之间并不具备依赖包含性，直接依赖父项目是无法依赖到子项目的；
    
    3.关于子模块：
        1.子模块用来对业务进行拆分，按照不同的业务类型拆分为不同的模块，保持业务代码之间的独立性；
        2.子模块中可以继续按照父项目+子模块的方式组织模块结构；
        3.子模块中如果实现了具体的业务信息，那么其packing类型要为jar，子模块中的父项目其packing类型则依然为pom类型；
        4.顶级子模块通常都是根据业务特征进行拆分，子模块中的子模块则通常都是根据代码功能特征进行拆分；

2.父项目创建方式：
    1.父项目基本结构：
        1.声明该父项目的gav坐标
            <groupId>com.ssliker</groupId>
            <artifactId>boot-practice</artifactId>
            <version>1.0.1</version>
        2.声明该父项目的包类型：
            <packaging>pom</packaging>
        3.声明该父项目的名称和描述：
            <name>project name</name>
            <description>project description</description>
        4.声明该父项目依赖的父项目(如果有的话)：
            <parent>
                <groupId>com.ssliker</groupId>
                <artifactId>parent-pom</artifactId>
                <version>1.0.1</version>
            </parent>
        5.声明该父项目管理的依赖以及依赖的版本号：
            依赖的版本号：
            <properties>
                <logback.version>1.2.3</logback.version>
                <slf4j.version>1.7.30</slf4j.version>
            </properties>
            依赖的jar包：
            <dependencyManagement>
                <!-- 日志配置-->
                <dependencies>
                    <dependency>
                        <groupId>org.slf4j</groupId>
                        <artifactId>slf4j-api</artifactId>
                        <version>${slf4j.version}</version>
                    </dependency>
                    <dependency>
                        <groupId>ch.qos.logback</groupId>
                        <artifactId>logback-core</artifactId>
                        <version>${logback.version}</version>
                    </dependency>
                    <dependency>
                        <groupId>ch.qos.logback</groupId>
                        <artifactId>logback-classic</artifactId>
                        <version>${logback.version}</version>
                    </dependency>
                </dependencies>
            </dependencyManagement>
    2.关于父项目与子项目的关系：
        1.父项目作为独立的项目存在：
            1.这种关系下，父项目和子项目在目录结构上并无任何关系，父项目是一个独立的项目。但子项目中同样可以通过parent标记设置父项目的maven坐标来依赖对应的父项目；
            2.该模式适用于该父项目需要被多个不同的项目依赖；此时可将父项目独立出来；比如spring-boot-starter-parent可以被任意项目当做父项目依赖；
            3.这种模式下，父项目依旧只是一个pom项目，即父项目中只有一个pom文件来管理一些依赖，没有其他内容；
        
        2.父项目直接包含子项目：
            1.这种关系下，父项目在目录结构上是子项目的父级目录，尽管如此，子项目中也必须通过在parent标记中设置父项目的maven坐标来依赖对应的父项目；
            2.该模式适用于该父项目仅仅只是为当前子项目添加的父项目，不会再用作其他项目的父项目，那么和子项目放在一起也方便查看；
            3.该模式下，父项目由一个pom文件和其他子项目组成；父项目的pom文件中管理相关依赖；
    
    3.关于父项目与子项目中依赖的管理：
        1.父项目通过<dependencyManagement></dependencyManagement>设置需要管理的依赖；此种方式下，子项目仍旧需要使用<dependencies></dependencies>添加需要的依赖，只是不需要再显式声明版本号；
        2.父项目直接通过<dependencies></dependencies>设置需要管理的依赖，此种方式下，子项目会自动继承父项目的<dependencies></dependencies>，对于父项目<dependencies></dependencies>中已经添加过的依赖，子项目可以直接使用；
    
4.关于子项目： 
    1.子项目只是相对于其继承的父项目而言的，子项目本身可以直接是具体的实现：即jar项目，也可以是其他子项目的父项目：即pom项目；
    2.当子项目作为jar项目时，其内部通过package来管理不同的业务代码；
    3.package结构通常如下：
        |--com
            |--ssliker
                |--project-name
                    |~~controller
                        |~~AController.java(class)
                    |~~service
                        |~~impl
                            |~~AServiceImpl.java(class)
                        |~~AService.java(interface)
                    |~~mapper
                        |~~AMapper.java(interface)
                    |~~entity
                        |~~dto
                            |~~ADto.java(class)
                        |~~po
                            |~~APo.java(class)
                        |~~vo
                            |~~AVo.java(class)
                    |~~enums
                        |~~AEnum.java(class)
                    |~~constants
                        |~~AConstants.java(class)
                    |~~utils
                        |~~StringUtil.java(class)