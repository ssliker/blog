1.如何开启一个事务？
    事务的实现有两种方式：
        1.编程式事务，即手动创建transactionManager或者transactionTemplate，然后手动调用方法实现；
        2.声明式事务，即通过@Transactional注解一个方法实现事务；
    具体实现流程如下：
        1.通过@EnableTransactionManagement开启事务；
        2.配置事务管理器 PlatformTransactionManager，为transactionManger指定dataSource；
        3.使用@Transactional注解事务方法，并在transactional注解中指定事务管理器
2.事务属性有哪些？
    1.隔离级别；
    2.传播行为；
    3.回滚规则；
    4.是否只读；
    5.事务超时时间；
3.@Transactional使用范围？
    1.用在方法上，表示该方法是一个事务方法；
    2.用在类上，表示该类中的方法都是事务方法；
4.事务底层实现原理？
    事务是基于动态代理实现的；如果一个类或者类中的方法被@Transactional注解的话，spring容器会在启动时创建该类的代理bean，然后在该方法中通过调用TransactionInterceptor的invoke()方法实现事务管理；
5.事务的隔离级别？
    有四种：RU、RC、RR、serializable四种，还有一种默认的级别，跟数据库有关，mysql默认隔离级别时RR隔离级别；
6.事务的传播行为？
    事务的传播行为有7种，具体如下：
    REQUIRED：如果当前方法存在事务就加入该事务，如果不存在事务就创建一个新的事务；
    SUPPORTS：如果当前存在事务就加入该事务，如果当前不存在事务就一非事务运行；
    MANDATORY：如果当前存在事务就加入该事务，如果不存在事务就抛出异常；
    REQUIRES_NEW：无论当前方法有无事务都会重新创建一个事务；
    NOT_SUPPORTED：以非事务方式运行，如果当前方法存在事务，则暂停事务；
    NEVER：以非事务方式运行，如果当前方法存在事务，则抛出异常；
    NESSTED：和REQUIRED效果相同；
7.事务的回滚规则是指什么？
    事务的回滚规则是指事务遇到哪些异常的情况下需要自动回滚事务；在@Transactional中通过rollbackFor和noRollbackFor来定义需要进行回滚的异常和不需要进行回滚的异常；
8.事务失效的情况？
    常见的有六种事务失效的情况：
        1.@Transactional注解用在了非public的方法上：
            因为底层实现中执行事务方法之前会先检测该方法是否为public权限，如果非public权限将会以非事务模式执行；
        2.@Transaction的传播行为设置错误：
            如果传播行为设置为非事务模式，将会导致事务失效；
        3.@Transactional中的rollbackFor属性设置错误：
            默认情况下，事务方法抛出了Error和RuntimeException才会回滚，其他Checked Exception是不会回滚事务的；如果配置了错误的回滚规则可能导致事务失效；
        4.同一个类中手动调用方法会导致失效：
            原因是事务是通过动态代理实现的，只有通过类以外的实例调用事务方法时才会通过代理对象调用，也才会有事务管理的逻辑，同一个类中在非事务方法中手动调用事务方法等同于直接通过this调用，而不是通过代理对象调用，所以会导致事务失效；
        5.异常被cache，导致发生异常之后无法回滚，而造成事务失效：
        6.两个方法分别访问不同的数据源导致事务失效：
            两个事务方法分别访问不同数据源时是不能使用本地事务的，需要借助分布式事务来实现了；