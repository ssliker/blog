1.关于web编程：
    客户通过浏览器以http协议发送请求至http服务器，http服务器将请求转发至web容器，web容器收到请求之后会运行相应的业务逻辑程序来处理本次请求；处理完成之后会将响应结果返回值http服务区，http服务器收到web容器的响应结果之后会将结果响应至浏览器；

2.请求处理流程：
    1.客户端根据url通过浏览器发送请求；
    2.如果url中的服务器地址使用的是域名，那么浏览器会先通过本地host文件配置或者DNS服务查找域名对应的服务ip地址；
    3.浏览器通过tcp协议将请求发送至http服务器，如nginx或者apache；
    4.http服务器收到请求之后会检测该请求是否是静态文件请求，以及是否有静态文件处理方式配置，并处理静态文件；
    5.如果该请求是动态请求，那么http服务器会根据负载均衡配置将请求转发至对应的web容器；
    6.web容器收到请求之后，会根据预先配置的url与servlet配置关系，查找对应的处理程序，并对请求进行处理。
    7.web容器处理请求，并得到响应结果，然后将响应结果返回给http服务器，http服务器将响应结果返回给浏览器，浏览器渲染响应结果数据。
3.http服务器和web容器之间的交互方式：
    http服务器和web容器之间通过tcp协议进行网络交互；
4.关于java进行web编程：
    1.web容器收到http服务器处理请求之后，需要调用业务程序来对请求进行处理，但是业务程序实现多种多样，所以，web容器和业务程序之间必须按照某个标准进行交互。
    2.java进行web编程中，java程序和web容器交互的标准是Servlet；java程序实现Servlet接口，web容器收到请求之后会调用Servlet接口中的方法来对请求进行处理。
5.关于Servlet:
    servlet是连接web容器和应用程序的桥梁
    1.狭义上理解：Servlet只是一个能够与WEB容器进行交互的标准接口，web容器在不同阶段会主动调用servlet接口中的方法完成请求的处理。
    2.广义上理解：Servlet只是一个接口，并不具备处理请求的能力，实际处理请求的是实现了Servlet接口的程序。因此把实现了该接口的程序也称之为一个Servlet
    
6.关于Servlet的特点：
    1.servlet是一个标准的接口，只需实现接口中的方法即可完成业务处理程序的编写，实现方式简单。
    2.web容器已经将请求信息解析并封装为固定格式的对象，业务处理程序只需获取对象中的信息即可。
    2.内嵌在web容器中运行，共享web容器的内存地址，无需独立的进程，效率更高。

