1.倒排索引：
    倒排索引是指建立文档内容和文档id之间的关联关系，能够通过文档的内容查找文档的id，然后借助文档id查找文档完整内容；与倒排索引相对的是正排索引，正排索引通常是指通过文档id直接查找文档内容；

2.es中的倒排索引：
    在向es中存储一个文档时，首先会对文档内容使用分词器进行分词，所得每个词组称为term，然后记录下该term所属文档的id，如果该term在多个文档中都存在，那么该term将对应一个文档id的列表，称之为Posting list，有了term和posting list的关联关系，那么通过一个term就一步可以得知存在该term的文档id，然后查询对应文档完整内容；因此借助倒排索引通过文档内容查找文档id的效率很高；

3.es中关于倒排索引的优化：
    1.如果分词之后term较多，内存中无法存放所有的term，必须将term存放在磁盘文件中，那么查找term本身就已经比较耗时，因此es中还通过term dictionary和term index联合提升term查找效率；具体方式如下：
        1.先将term进行排序，排序完成之后，具有共同前缀的的term将聚集在一起并且按照顺序存放，排序完成之后的term集合称为term dictionary，这样的好处就是磁盘文件中只需要存储term除过共同前缀的部分，占用空间更少，一次可以加载更多的term至内存中；
        2.为了能够加快term查找效率，es通过FST的方式为term dictionary中的term前缀建立索引，索引结构为字典树，因为使用了FST的压缩方式建立字典树，其占据的空间极小，通常内存中即可存放整颗字典树；
    2.如果文档数量较多，那么term对应的文档id也将会比较多，即posting list将会比较大，无法在内存中存放时必须存放在磁盘文件中，为了能够加快posting list的加载效率，es还使用了压缩算法和Roaring Bitmaps的方式存储posting list，具体如下：
        1.首先会对文档id从小到大进行排序，然后计算后一个值相对于前一个值的差值，实际存储时并不存储具体的文档id，而是只存储两个文档id之间的差值；借此减少id本身占用的存储空间；
        2.实际存储差值时也不会直接存储数字本身，而是以bitmap的方式来存储，其中差值的具体数字表示bitmap的低n位，如果该位有值即为1，否则为0，借此减少存储差值需要消耗的存储空间；
    
    3，对于上述优化而言，虽然能够减少存储空间占用，减少io次数，但是由于涉及大量运算，因此比较耗费CPU;

4.通过term查找文档id的方式：
    1.首先对查找内容按照存储文档时的分词算法进行分词，然后根据term index查找词组前缀在term dictionary中的位置；然后再确定term对应的posting list;
    2.如果是多个term联合查询，那么需要对两个term查找到的posting list进行求与运算，确定公共值；通常有两种方式：
        1.skip list；
        2.将Roaring Bitmaps按位与即可；

5.关于分词：
    1.分词是指通过算法将一段文档内容分割为多个有意义的词组；
    2.常用的分词库有结巴、IK分词等；
    3.es也支持自定义分词方法和词库；

6.关于elasticsearch：
    1.简介：
        1.分布式的存储引擎，以集群的方式部署，支持PB级数据存储和处理，并且支持跨网络集群赋值；
        2.分布式的搜索引擎，默认会为存储的文档内容建立倒排索引，支持高效的全文搜索；
        3.以Lucene为核心，以RESTful http作为通信格式，支持多种语言api；
        4.以json序列化之后的文档作为存储内容，支持结构化、非结构化、地理信息等数据；
    2.结构：es和传统关系型数据库对比：
            es实例：数据库
            索引index：数据表
            类型type：在es新版本即将取消type类型；
            document：数据记录
            fileds：字段；
            mapping：数据表结构，和关系型数据库不同的是es可以自动根据存入的索引文档来建立mapping；
    3.操作：es支持一RESTful http的方式进行通信：
        GET  获取对象信息
        POST 更新对象信息
        PUT  新增对象信息
        DELETE 删除对象信息
        HEAD 检查对象信息
    
