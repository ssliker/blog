1.缓存双写一致性问题：
    1.缓存和数据库需要同时更新时，由于两个更新操作非事务，那么可能出现一个更新成功，另一个更新失败的问题，最终导致脏数据出现；
2.缓存双写一致性策略：
    1.先更新缓存、后更新数据库：
        1.如果缓存更新成功、数据库更新失败那么缓存中的数据就成脏数据了，会给客户端返回一个错误的数据值，因此不采用；

    2.先更新数据库、后更新缓存：
        1.非并发场景下该方案可行，但是并发场景下，可能出现缓存更新顺序与数据库更新顺序不一致，导致旧值覆盖掉新值的情况；如以下例子：
            1.数据库操作1-->将key更新为4-------->将缓存更新为4；
            2.数据库操作2---->将key更新为5-->将缓存更新为5
            此时，操作2比操作1后完成数据库更新操作，那么数据库的最终值是5；但是更新缓存时，操作2却比操作1先更新缓存，那么操作1更新缓存时会将操作2的结果覆盖掉，导致缓存中是4；最终造成数据错误；

    3.先删除缓存、后更新数据库，由后续请求自动更新缓存：
        1.非并发场景下该方案可行，但是并发场景下，缓存中的数据可能无法被更新；如以下例子：
            1.删除缓存；
            2.数据库操作1------将key更新为5；
            3.数据库操作2---查询缓存中的值不存在--->数据库中查询key的值为4-->设置缓存的值为4
            此时，如果查询操作是在操作1更新数据完成之后查询，那么缓存就能得到有效更新，但是查询操作略早于操作1时，数据库中的缓存还是会被设置为旧值；
        2.如果非得用这个方案，也可以，需要采用延时双删策略：即先删缓存，后更新数据库，延迟一会再删缓存；
        
    4.先更新数据库、后删缓存，由后续操作更新缓存；
        1.此种方案对于大多数场景下都是可以满足要求的，通常缓存双写一致性都是用这个方案；
           