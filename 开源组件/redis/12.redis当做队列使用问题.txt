1.选择一个队列的基本考虑方向：
    1.关于消息发送：
        1.是否支持多种消息发送模式：包括：同步发送、异步发送、单向发送、延迟发送
    2.关于消息队列：
        1.是否支持消息堆积，以及消息的堆积能力大小
        2.是否支持消息分区，包括逻辑分区和物理分区
        3.消息存储是否可靠，消息是否会持久化，会不会因为系统崩溃而导致消息丢失
        4.是否支持顺序消息，是否支持局部有序、全局有序、无序消息
    3.关于消息消费：
        1.是否支持多种消费模式：至少消费一次、刚好消费一次、最多消费一次
        2.是否支持重复消费；
        3.是否支持广播消费；
    4.其他的高级特性：
        1.是否支持事务消息
        2.运维结构是否支持水平扩展
        3.运维结构是否支持高可用
2.redis中可以用作实现队列的方案：
    redis中提供了list数据结构可以用作消息队列，同时redis还提供了sub/pub模块也可以用作消息队列；具体如下:
    1.使用List做消息队列：
        1.List本就是队列结构，redis中的List支持以下几种队列特征：
            1.消息发布：支持以同步的模式发送消息：LPUSH/RPUSH
            2.消息暂存：支持少量的消息堆积；
            3.消息分区：可以通过定义不同的List实现逻辑和物理上的分区；
            4.消息是否可靠：redis支持持久化机制，配置合理的持久化机制可以实现消息可靠存储；
            5.是否支持顺序消息：单个队列内天然有序，多个队列之间无序；
            6.消息消费：只提供最多消费一次的模式，一旦消费消息就会从队列中被删除，所以也不支持重复消费；
            7.广播消费：不支持广播消费，一条消息只能被一个客户端消费；
            8.事务消息：没有通知回调机制，不支持事务消息；
        2.List用过队列的话有两个个非常致命的问题：
            1.消息只提供最多消费一次的模式，如果消费过程中消费者崩溃、消费者拉取消息时网络崩溃都会导致这条消息无法被正常消费，这条消息就会丢失！
            2.不支持广播消费模式，一个消息只能被一个客户端消费，对于业务的扩展极其受限！
    2.使用sub/pub模块做消息队列：
        1.sub/pub模块最大的特点就是在单纯List结构的基础上支持了广播消费模式，一个消息可以被多个消费者消费；
        2.但是相对List结构作为队列而言又多引入了一个问题：消息无法暂存；pub/sub模块中，消息只会被简单的从pub方转发到sub方，会在以下几种情况下导致消息丢失：
            1.如果消费者不存在消息就会被丢弃，消息无法被暂存；在pub/sub模式下，必须先启动消费者；
            2.消息堆积，pub/sub模块中暂存消息的大小是由上限的，如果暂存消息过多达到上限，那么redis就会强制把这个消费者踢下线；消费者一旦下线，消息也会被丢弃；
            3.redis持久化并不会持久化这一部分数据，所以一旦redis宕机，那么消息也会丢失；
        3.除此之外，pub/sub同样只支持最多消费一次的模式，无法重复消费消息，还存在消息丢失的风险；
        4.本质上来讲List属于拉模型，需要客户端自己请求消息，而PUB/SUB则属于推模型，会主动将消息推送到sub方；
    