关于消息发送：
    1.发送同步消息：
        1.方法： SendResult sendResult = producer.send(msg);
        2.特点：消息发送者需要等待broker-server返回消息发送结果之后才能继续向下执行；
        3.细节：同步消息发送模式消息返回时间和broker的配置相关，具体如下：
             1.默认情况下broker节点在收到消息之后会立即返回消息发送结果；
             2.如果配置了flushDiskType那么broker会在消息持久化到磁盘上之后才会返回；
             3.如果配置了主从结构并且brokerRole参数设置为了SYNC_MASTER的话，在消息发送至从节点之后才会返回发送结果信息；
    2.异步发送消息：
        1.方法：
            producer.send(msg,new SendCallback(){
                onSuccess(SendResult sendResult){}
                onException(Throwable throwable){}
            })   
        2.特点：消息发送完成之后不必等待消息结果，可以继续向下执行；但是需要设置回调函数接收消息发送结果；
    3.单向消息：
        1.方法： producer.msgsendOneway()
        2.特点：消息发送者不关注消息发送结果，消息发送之后可以立即向下继续执行，也不必设置回调函数
    
    4.事务消息：
        1.rocketmq中事务消息的模型：
            1.消息发送者需要先添加一个监听器，在监听器中提交本地事务逻辑；监听器中的逻辑只会在broker返回SEND_OK时执行；
            2.消息发送者发送事务消息，此时消息处于一个半消息状态，消息虽然发送到队列中了但是无法被消费者消费；
            3.事务消息发送到队列之后，当前消息发送者会执行第一步注册的监听器，执行本地事务逻辑，本地事务逻辑要按照是否执行成功返回COMMIT_MESSAGE或者ROLLBACK_MESSAGE；
            4.并且每隔一段时间，消息队列broker会回查本地事务提交结果，在回查实现中需要检测事务提交状态，并返回COMMIT_MESSAGE/COMMIT_ROLLBACK/UNKNOW;
            5.回查的频率以及最大次数可以在broker端设置：
                brokerConfig.setTransactionCheckInterval(1000)；ms单位
                brokerConfig.setTransactionCheckMax(3);
                在超过最大回查次数之后，消息队列将会自动执行COMMIT_ROLLBACK命令；
        2.注意实现：
            1.关于本地事务提交：
                1.本地事务所有逻辑必须放在监听器的executeLocalTransaction中，不要自作聪明放在其他地方执行事务；这个方法只有broker返回SEND_OK时才会调用，一定能够保证事务和消息的一致性；
            2.关于回查逻辑：
                1.在本地事务中执行事务时也要记录下本次事务消息的事务id；可以通过message.getTransactionId获得；
                2.回查时可以通过检测数据库中是否有本次事务消息的事务id确定事务是否执行成功；
                3.如果消息中有能够确定事务的唯一id(orderId)也可以用该id作为回查条件；
                4.回查逻辑中如果没有检测到事务成功的信号，推荐返回UNKNOW，而不是COMMIT_ROLLBACK；以防事务暂时未执行成功，返回ROLLBACK之后本地事务又执行成功导致数据不一致；
        3.代码实现：
                
    5.消息顺序控制：
        1.无序消息；
            1.默认状态就是无序消息；
            2.同一个topic下可能有多个消息队列，消息发送到topic下的消息队列时会按照选择的负载均衡策略发送到其中某一个队列中；所以队列之间无法保证其消息的有序性；
        2.局部有序消息：
            1.要求消息局部有序的的实现思路就是需要保证顺序的消息需要发送到同一个消息队列中；
            2.具体实现：需要注册消息队列选择器，在消息队列选择器中按照消息类型返回同一个消息队列id即可；
            3.代码实现：
                producer.send(msg,new MessageQueueSelector(){
                    MessageQueue select(List<MessageQueue> list,Message message,Object msgSelectTag){

                    }
                },msgSelectTag)
                说明：
                    1.发送时需要先传递给消息队列选择器一个参数msgQueueTag，比如订单id等；
                    2.该参数会传递给select方法的o参数；
                    3.在select中可以根据o参数来选择一个消息队列返回；
        3.全局有序：
            1.全局有序的消息要求所有消息发送者需要将所有的消息按顺序发送至topic下的同一个消息队列；
            2.代码实现：
                producer.send(msg,new MessageQueueSelector(){
                    MessageQueue select(List<MessageQueue> list,Message message,Object o){

                    }
                },msgSelectTag)
                说明：
                    1.在该方法中返回固定的消息队列id即可；
              
    6.消息发送流程：
        1.发送流程如下：消息验证、查找路由、消息发送
        2.消息验证：
            1.检验发送者是否处于运行状态；
            2.检查消息长度是否符合规范；必须大于0，小于4M
            3.检测是否设置主题信息；
        3.查找路由：
            1.查找路由是指根据topic查找borker信息的过程；
            2.查找流程：
                1.查找时会先检测消息生产者的缓存中查找topic对应的broker信息；
                2.如果生产者中没有缓存该信息，那么回去nsrv中查找topic对应的broker信息；
                3.如果nsrv中也没有topic的信息，那么会检测是否开启自动创建主题的配置是否配置为true；如果为true那么会自动创建topic，然后将topic对应的broker返回；
                4.如果上述操作都未能成功执行，那么返回异常；
        4.消息发送：
            按照使用的消息发送模式发送消息；
    