关于消息消费：
    1.关于消费者组：
        1.消费者组是对消费者进行逻辑分类的一个概念；
        2.消费者需要先设置消费者组，一个消费者只能属于一个消费组，一个消费组可以包含多个消费者；
    2.关于订阅主题：
        1.消费者在消费之前必须先要订阅需要消费的主题，订阅之后，消费者将只能消费其订阅主题下的消息：
            1.consumer.subscribe(topic)  # 只订阅主题
            2.consumer.subscribe(topic, tag)   # 同时订阅topic和主题
    3.消费模式：
        1.消费模式支持广播模式和集群模式：
            1.广播模式是指：一个消息可以被所有订阅了该主题的消费者消费；
            2.集群消费模式：一个消息只会被路由到某一个订阅了该主题的消费者上；
        2.消费模式设置方式：
            1.设置方式：
                1.consumer.setMessageModel(MessageModel.BROADCASTING)
                2.consumer.setMessageModel(MessageModel.CLUSTERING)
    4.消息过滤：
        1.通过订阅主题，实质上已经完成了一次消息过滤；
        2.除此之外，消息还支持设置tag，通过tag也可以完成消息过滤；
        3.消息还支持设置k-v属性，所以通过过滤消息携带的属性值也可以实现消息过滤；

    5.消息的获取模式：
        1.拉取模式，由消息消费者从broker中拉取信息进行消费，rocketmq默认情况下即为拉取模式；
        2.推送模式，对于Rocketmq而言推送模式本质上也是拉取模式，并不存在真正的推送，Rocketmq通过定时任务封装了拉取模式，定时拉取消息；
        3.消息获取模式在创建消息消费者时指定：DefaultMQPushConsumer和DefaultMQPullConsumer；
        4.关于拉取和推送模式：
            1.拉取模式对于消息消费进度更加可控，但是消费端消费速度过慢会造成消息在队列中堆积；
            2.推送模式对于消息消费更加及时，但是需要队列维护当前在线的消费者列表；
           
    6.消息重复消费问题：
        1.发生重复消费的原因：
            1.rocket采用的发送-确认机制，在发送消息之后，broker必须向生产者返回发送结果，如果超时之后仍然没有收到broker返回的发送结果，消息生产者会重复发送消息至broker；消费者消费时将会看到两个相同的消息，造成消息重复消费；

            2.rocket对于消息消费仍然采用消费-确认机制，在消息消费之后，消息消费者必须向broker返回消息消费结果，如果返回消费失败或者消费过程中发生异常，或者超时没有收到消费者返回的消费状态，那么broker会暂存消息，间隔一定时间之后继续让消费者消费；如果消息消费者消费成功之后的步骤发生异常，或者网络异常导致broker未收到消费结果，那么之后还会再被消费一次；造成消息重复消费；

            3.当broker、客户端重启、扩容、缩容时可能造成消息重复消费；

        2.避免消息重复消费的措施：
            1.给消息设置唯一key，并在消费端消费完成之后记录该key，消费之前检测该key是否已存在；
            2.不推荐使用mseeageId，Rocketmq中messageId有可能出现重复；

        3.消息重试：
            1.消息重试核心原因是broker未接收到消息消费者返回的消费成功标识：
                1.消费过程中发生异常；
                2.消费者返回消息消费失败；
                3.消费者消费消息之后未返回消费状态；
                4.消费者返回消费标识之后，网络异常，消费标识未被传递至broker中；
            2.发生上述原因之后，rocketmq会暂存消息，然后间隔一定时间之后再次推送给消费者消费，包括两个点：
                1.rocketmq提供消息重试机制，但是有重试频率和最大重试次数限制：
                    consumer.setMaxReconsumeTimes(3)   //消息最大重试次数，默认是16次；
                    consumer会间隔时间之后重新推送消息给消费者，间隔时间会逐步增加；
                2.实际应用中，推荐在每次消费时检查消费次数，超过消费次数之后报警处理，避免消息长时间消费失败得不到处理；获取消费次数的接口：message.getReconsumeTimes()，并且消息重试是针对消息消费组的不是消息消费者，所以消息再次重试之后不一定会落在上次的消息消费者中；

                3.在重试次数超过最大重试次数之后，消息将会成为死信消息，被放置在死信队列中；
        4.关于死信消息和死信队列：
            1.关于死信消息：
                1.消息消费重试次数已经超过了消费最大阈值，该消息将成为死信消息，不能再被消费者消费；
                2.死信消息将会被移动至死信队列存储；
                3.死信消息的有效期和普通消息的有效期相同，都是三天，如果三天还未消费那么将会删除；
            2.关于死信队列：
                1.一个死信队列和一个消息消费组对应而不是消息消费者对应；一个消费组下不同消费者产生的死信消息都将放到同一个死信队列中；
                2.如果一个消息消费组下的所有消息消费者都没有产生死信消息的话，那么系统也不会为该消费组创建死信队列；
        5.消息消费进度：
            1.消息消费进度按照不同的消费模式保存在不同的位置：
                如果消费类型是集群模式，那么消费进度保存在broker上
                如果是广播模式，消息消费进度则保存在消费者端
        