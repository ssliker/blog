1.关于HTTP/1.x的网络连接模型：
    HTTP只是应用层协议，其运输层采用TCP协议，意味着每建立一个新的HTTP请求都需要先通过TCP的三次握手机制和服务器建立连接；

    HTTP/1.0通信模型：
        1.HTTP/1.0版本，每次和服务端通信时都需要先和服务器通过三次握手机制建立连接，然后发送请求数据，等待服务端响应数据，断开连接；下一次请求资源时又需要重新建立连接执行上述流程；
        2.HTTP/1.0由于每进行一次请求都需要建立一次连接，因此效率很低，可以将Connection头字段的值设置为keep-alive；保持客户端和服务端的长连接；这样同一次回话中，只需建立一次连接即可，多次请求会复用该连接；
        3.Connection的值设置为keep-alive并不是HTTP协议规定的默认值，需要服务端支持才行；

    HTTP/1.1通信模型：
        1.HTTP1.1版本的通信方式和HTTP1.0版本相同，但是HTTP/1.1版本将Connection字段的值默认规定为keep-alive，默认情况下客户端和服务端即保持着长连接，一次回话中，始终会复用已经建立的连接；如果需要在通信完成后断开连接，可以将该字段的值设置为close即可；
        2.由于客户端和服务端默认保持长连接，能够实现连接的复用；提高通信效率；
    
    HTTP/1.x通信缺陷：
        1.业务上要求请求和响应需要一一对应，但是实际上请求和响应之间并没有一个标识来建立连接，因此同一时刻只能允许发送一个请求，并且只能等待该请求返回响应结果之后才能发送下一个请求来实现请求和响应的一一对应；那么多个请求复用同一个连接的情况下会就会出现线头阻塞的问题；即前一个请求阻塞，那么后面复用该连接的请求都只能阻塞等待；
        2.由于请求只能按照顺序一一发送，无法实现并行请求，请求效率在一定程度上并不高；

2.关于SPDY和HTTP/2.0:
    关于SPDY：
        因为HTTP/1.x的缺陷，谷歌提出了SPDY协议对HTTP协议进行增强，SPDY协议为HTTP协议带来了多路复用、header压缩/删除、服务端推送等功能；
        SPDY位于TCP/SSL之上、HTTP之下，可以兼容老版本HTTP协议；
    
    关于HTTP2.0协议：
        HTTP/2是基于SPDY开发的新一代HTTP协议，主要引入了二进制分帧、多路复用、header压缩、服务端推送、请求优先级控制等功能；

        关于二进制分帧:
            HTTP2中将消息分割为更小的帧，并以二进制的方式编码，发送时使用同一条连接通道乱序发送，对端收到消息之后按照帧的头部信息重新组装得到消息；相比较HTTP1.x采用文本的方式组织数据，HTTP2采用二进制的方式发送数据其健壮性更高；
        
        关于header压缩:
            为何需要头部压缩：HTTP/1.x中每次请求都要携带大量的请求头信息，这些头信息有时候甚至比数据本身还大，严重影响通信效率；所以HTTP2中提供了header压缩功能；具体实现上通过头部共享和渐进更新的方式减小头部对通信带来的影响；
            头部压缩做法：
                所谓头部共享是指：后面的请求会共享前面请求共有的头部字段，只发送当前请求特有的字段，避免每次都发送公共字段；
                所谓渐进更新是指：后一次发生的请求头部字段值有更新时，则只发送有更新的头部字段，不会将所有的头部字段发送至服务器；
            头部压缩优势：通过header压缩可以保证头部字段占据的数据更少，通信效率更高；
        
        关于多路复用：
            多路复用是指，同一时刻可以利用同一条通道向服务器端发送多个请求，而不是像HTTP1一样，同一时刻只能发送一个请求；
            多路复用通过二进制分帧的乱序发送实现的；
        
        关于请求优先级控制：
            HTTP2支持设置请求的优先级来发送请求，0优先级最高，2^31-1优先级最低
            HTTP2通过控制优先级可以按照需求加载内容，但是可能出现线头阻塞的问题；

        关于服务端推送：
            指服务端可以推送内容给客户端，但是要遵守同源策略；
        




    
    