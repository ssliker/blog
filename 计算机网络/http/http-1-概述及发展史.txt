HTTP概述：
    1.HTTP(Hyper Text Transfer Protocol)--超文本传输协议；
    2.HTTP协议是web应用的通讯协议；主要用于浏览器和服务器之间数据的传递；目前也用来在服务端进行接口调用的通信协议；
    3.在OSI模型中HTTP协议属于应用层协议，其传输层使用TCP协议；HTTP协议本身只是规范了应用层传输信息过程中的内容以及格式，不涉及数据包报控制；

HTTP的版本：
    :第一阶段：HTTP/0.9
        起源：
            HTTP协议最早的版本是1991年发布的版本，版本号是0.9；该版本的规范极其简单，其目标也仅限于HTML文档的传输，又被称之为单线协议；
        特征：
            1：对于请求方法，由于最开始的需求仅仅只是浏览器向服务端请求HTML文档，并在浏览器端显示该HTML文档，因此该版本仅仅支持GET方式请求;
            2：对于请求信息，也只有一行请求内容：请求方法 URI；比如：GET /resource.html;
            3：对于响应信息也非常简单，只包含一个以ASCII码作为字符集且为HTML标记格式的文档；比如：<HTML> html document contents <HTML>;
            除此之外，没有请求头字段，没有响应头字段，没有状态码，不支持多种格式的数据传输,也不支持cookie等更高级的内容；
            4：客户端-服务器通信模式：必须由客户端发起请求，由服务端来接收请求并处理之后响应给客户端；即采用客户-服务器的通信模式；
            5：无连接：通信时建立连接，通信完成即断开连接，下次通信从新建立连接；
            6：无状态：不记录任何通信内容，状态以及元信息；下一次的通信和上一次的通信完全独立，且无法获取上一次通信的任何内容；
            7：无会话：该版本的协议仅仅支持静态网页的浏览，而且没有cookie的支持(cookie在1993年被发明，这时候也没有的用)，所以通信时无会话的；

    :第二阶段：HTTP/1.0
        起源：
            由于互联网的飞速发展，对于HTTP协议包含的规范也越来越难以应对需求，因此在1996年5月，HTTP/1.0版本发布;该版本在0.9版本的基础上增加了很多内容；
        
        特征：
            1：对于请求方法：在0.9版本的基础上，又新增了POST以及HEAD方法，至此，HTTP协议包含了三种请求方法：GET、POST、HEAD；对于服务器的请求方式更加多样化，能够满足多数需求；
            2：对于请求信息：该版本规定，发送请求时：必须包括请求头字段以及请求实体：
                请求头字段用来描述本次请求的一些元信息,包括：
                    请求方法：用来描述本次请求的方式，不同的请求方式具有不同的语义，代表对资源不同的操作方式；
                    请求资源地址：用来描述需要请求的资源所在的地址，即从该地址上获取所需要的资源；
                    HTTP协议版本号：明确本次请求使用的HTTP版本；
                    请求头字段：存储本次请求的元信息，这些信息用来描述本次请求的一些特征，使得协议非常灵活以及可扩展，满足客户端不同的请求需求；

                请求实体则用来存储发往服务器的数据：
                    对于GET、POST、HEAD都可以设置请求实体，以携带需要发往服务器的数据，并且支持多种数据格式的请求实体(如：二进制内容，文本，参数等)；
                
                请求结构示例如下：
                    GET / HTTP/1.0
                    User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5)
                    Accept: */*

            3：对于响应信息：该版本规定，在每次响应客户端请求时需要携带响应头字段，并根据具体情况携带响应实体；
                响应头信息中包括：
                    HTTP协议的版本：描述本次通讯使用的HTTP版本；
                    状态码：描述本次HTTP请求的结果，不同的状态码描述了不同的请求结果；
                    状态描述：对状态码的描述；
                    响应头字段；存储本次响应的元信息，告知客户端本次响应的一些基本信息；

                响应实体用来存储服务端向浏览器返回的请求资源：
                    该版本支持更多格式的响应实体(如：HTML文档、二进制内容、文本、json格式的数据等)，并可以在响应头字段予以说明，方便客户端解析；

                响应结构示例：
                    HTTP/1.0 200 OK 
                    Content-Type: text/plain

                    <html>
                    <body> response content </body>
                    </html>

            4：更多的功能：
                由于头信息的引入，使得HTTP的功能变得极其丰富，在头信息的基础上也新增的一些功能包括：(不够准确，待查证)
                多字符集的支持及协商：在0.9版本仅仅支持英文的字符集，在该版本中则支持更多的字符集，如unicode等字符集；
                更多编码方式的支持以及协商：该版本规定头信息(包括请求头信息以及响应头信息)必须使用ASCII编码,而对于通信实体则增加更多的编码方式支持(如UTF-8)；
                权限：该版本增加了身份认证功能
                缓存：增加了浏览器缓存，对于未过期的文档，浏览器无需再向服务器请求资源，而是直接使用缓存，提升通信效率；
                cookie的支持：使得HTTP的通信过程有了连续性，具备会话的功能；

            5：HTTP1.0未解决的问题：
                1：对于HTTP1.0中新增的功能并没有作为协同努力引入，而是浏览器和服务器扩展的功能，作为1991-1995期间的一种尝试，狭义上来看，这些新增的功能并非是官方标准；
                2：客户端和服务器端进行通信时，必须在通信之初建立连接，在通信完成之后断开连接；由于HTTP协议在传输层使用TCP协议，因此每次通信开始时都必须经过三次握手建立连接；通信完成之后必须通过四次握手机制断开连接；这样的操作对于频繁的请求来说操作成本及其昂贵，通信效率很低；

            6：对于HTTP/1.0版本的特征总结：
                1：支持对资源更多的处理方法(语义上)；
                2：头信息的引入使得协议具备扩展性(可以实现内容协商，编码方式协商，字符集协商，缓存，权限等功能)；
                3：客户端-服务端通信模式：该版本依然采用客户端发起请求，服务端接收请求并处理之后响应给客户端的模式；
                4：无连接：该版本中已经可以通过设置Connection:keep-alive来保持连接以达到复用的目睹，但是并非HTTP协议的标准，默认不开启；因此默认情况下该版本中仍然需要在每次通信之前建立连接，通信完成之后关闭连接；
                5：无状态：该版本中每次通信仍然是独立的通信，不记录任何通信内容，状态，元信息；下次的请求获取不到上次请求的任何内容；
                6：有会话：这也是该版本和上一版本差别最大的地方之一了，在该版本中有了cookie的支持，让客户端和服务端的会话成了可能；
                7：该版本的HTTP协议已经和上一版本完全不一样了，这一版本的HTTP协议基本奠定了HTTP协议的基础，从最初的静态网页浏览到现在可以支持更丰富的请求方式、更丰富的通信内容以及更丰富的应用场景；

    :第三阶段：HTTP/1.1
        1：起源：
            于1997年，HTTP协议的新版本发布，即HTTP/1.1，仅仅在HTTP1.0的几个月之后发布；该版本在HTTP/1.0的基础上新增、修改以及明确了一些内容；使得HTTP协议更加完善，一直被持续使用到今天；
        2：特征：
            1：对于请求方法：
                在HTTP/1.0的基础上，又新增了PUT、PATCH、OPTIONS、DELETE等四个方法，对于网络资源的操作方式满足更多的需求，语义进一步明确；

            2：对于请求信息：请求结构依然沿用HTTP/1.0的请求结构；但是增加了Host字段，来指定服务器的域名；

            3：对于响应信息：响应结构依然沿用HTTP/1.0的响应结构

            4：对于连接的处理：在该版本中明确使用Connection:keep-alive来保持tcp连接状态，以达到复用连接的目的；并且默认不关闭TCP连接，不用显式声明Connecttion:keep-alive;

        3：对于新增的功能：
            1：该版本引入了管道机制：即在同一个TCP连接里面，客户端可以同时发送多个请求，进一步改进HTTP协议的效率；
            2：引入了Content-Length字段，因为在HTTP/1.1版本中，一个TCP连接可以传送多个回应，因此必须通过该字段声明本次回应的数据长度，以保证客户端可以正确解析响应的内容；在HTTP/1.0中，该字段并非必须字段，只有在显式声明Connection:keep-alive时才需要声明该字段，否则一个连接的断开就已经表明响应内容发送完毕；
            3：支持分块传输编码：如果一个响应需要耗时较长，那么服务器就只能等待资源全部准备完毕之后才能返回，效率较低；因此提出分块传输的概念，即：产生一块数据就发送一块数据，采用‘流模式’取代‘缓存模式’，因此HTTP/1.1版本规定可以不使用Connect-Length字段，而使用Transfer-Encoding字段；分块传输编码是断点续传的基础；
        
        4：对于HTTP/1.1版本的特征总结： 
            1：支持对资源更多的处理方法(语义上，对资源操作的场景更加丰富)；
            2：新增头字段，让协议的功能更加丰富；
            3：客户端-服务端通信模式：该版本依然采用客户端发起请求，服务端接收请求并处理之后响应给客户端的模式；
            4：有连接：该版本中默认设置Connection:keep-alive来保持连接以达到复用的目的；
            5：无状态：该版本中每次通信仍然是独立的通信，不记录任何通信内容，状态，元信息；下次的请求获取不到上次请求的任何内容；
            6：有会话：在该版本中仍有cookie的支持，让客户端和服务端的会话成了可能；
            7：该版本的HTTP协议更多的是对HTTP/1.0协议的标准化，对HTTP/1.0协议的进一步完善和丰富；
    
    :第四个阶段：HTTP/2.0








            

        
        
        