HTTP协议中的请求方法：
    请求方法通常标识对服务器资源的操作方式；由请求头中的Request Method 字段指定；

    Request Method可以取值如下：
        0.9：GET
        1.0支持的方法：GET、POST、HEAD
        1.1支持的方法：GET、POST、HEAD、PUT、DELETE、PATCH、OPTIONS、TRACE、CONNECT(预留)

    Request Method不同取值的目的：
        1：与服务端交互的过程本质上即为对服务端资源的操作，针对服务端的资源，客户端可以通过发送HTTP请求来创建资源，删除资源，修改资源以及创建新资源；
        2：通过设置Request Method的值，可以让客户端发送至服务端的请求语义更加明确，通过请求方法即可明确本次请求是对服务端资源进行何种操作；
        3：但是需要注意的是：无论Request Method取何值，仅仅只是语义上的建议和规范；HTTP协议在传输层均是通过TCP协议传递数据，本质上并无不同，甚至在实际情况下不会完全遵守HTTP的语义来发送HTTP请求；
        总结：
            1.理论：为了让客户端与服务端交互语义更加明确；
            1.实际：除过使用restful这种交互风格以外，很少严格遵守语义要求；请求方法和实际执行的操作没有严格的对应关系；服务器本身也不会对不同的请求方法添加不同的限制；

    HTTP方法的性质：
        1：安全性：
            1.1：HTTP协议中的安全和常规意义上的安全并不相同；在HTTP协议中，如果一个方法在语义上是只读的，那么使用该方法请求服务器资源的时候至少在语义上保证不会引起资源本身的修改、删除、新增，那么方法就是安全的；
            1.2：按照这个定义，安全的方法有以下几个：GET、HEAD、OPTIONS；
            1.3：上述安全性的定义仅仅只是语义上的安全，服务器实际实现时有可能不会遵守该规范，比如完全可以通过GET方法修改服务端资源；
            1.4：之所以引入安全性这个概念，主要目的在于方便网络爬虫和缓存，以免调用或者缓存某些不安全的方法时引起意外的后果，并且浏览器应该在执行安全和不安全的方法时区分对待，并给用户提示；

        2：幂等性：
            2.1：HTTP协议中的幂等是指：同一个请求，执行一次和执行多次效果相同，就称之为幂等；
            2.2：按照上述定义，幂等的方法有以下几个：GET、HEAD、OPTIONS、PUT、PATCH、DELETE这些方法都具备幂等性；
            2.3：幂等性的设计主要目的在于解决同一个请求发送多次对服务端资源带来的影响；如果一个方法是幂等的，那么对于同一个请求发送多次，不会造成服务端资源的不同；
            2.4：幂等仍然只是HTTP协议本身的语义规范，在实际实现中有可能不会被遵守；

        3：可缓存性：
            3.1：HTTP协议规范了哪些方法的请求是可以被浏览器缓存的，可以被浏览器缓存的方法则具备可缓存性；
            3.2：目前只有GET方法、HEAD方法以及某些情况下的POST方法可以被缓存
            3.3：同样，可缓存性也只是HTTP协议的语义规范，不代表实际中的具体实现；

    不同Request Method取值的区别：
        语义上的区别：
            GET请求：  GET方法被设计用来从服务端获取资源；
            POST请求： POST方法被设计用来在服务端创建一个新的资源；
            PUT请求：  PUT方法被设计用来在服务端完整替换/修改一个资源；
            PATCH请求：PATCH方法被设计用来在服务端局部替换/修改一个资源；
            DELETE请求：DELETE方法被设计用来删除服务端的一个资源；
            HEAD请求：HEAD方法和GET方法基本类似，但是使用HEAD方法时，服务端不会返回响应实体，仅仅返回响应头部；语义上一般用来测试请求的有效性、可用性以及最近的修改等信息；
            OPTIONS请求：OPTIONS方法主要用来进行预请求，获取服务端资源支持的HTTP请求方法，以及检查服务器性能等
            注意：
                1：上述区别仅仅只是语义上的区别，表明本次请求是对服务端资源进行哪种操作，但是并不代表请求实际的动作。仅仅只是一种规范，一种建议；协议本身并没有限制某一个方法只能进行某一种操作，上述方法均可以实现对服务端资源的增删改查等操作；
                2：在实际业务中，主要使用GET和POST方式向服务端发起请求，并不会严格遵守协议的规范；实际中还是需要根据具体的业务逻辑来确定该请求是对服务端资源进行哪一种操作；
                3：在RESTfu风格的接口中，推荐严格按照HTTP协议中提议的规范来使用请求方法；

        浏览器以及服务端实现上的区别：    
            四点注意事项：
                1：对于不同请求方法的语义而言：不同的请求方法仅仅只是语义上的规范和建议；实际中服务端和客户端都不会有任何不同的限制；执行的实际操作和请求方法的语义没有严格对等关系；

                2：发送参数的方式：HTTP协议并没有限制哪种请求方法发送请求参数时只能通过查询字符串发送或者只能通过请求实体发送；每一种请求都可通过路径参数、查询字符串、请求实体向服务端发送数据；

                3：发往服务器数据的大小限制：HTTP协议并未限制客户端发往服务端的数据大小，无论是资源url长度还是请求实体大小都没有限制；实际中的限制一方面来自服务器本身、一方面来自浏览器本身主要目的都是为了保护服务器免受非法请求的侵害；

                4：不同请求方法的安全性：请求方法仅仅只是应用层协议的内容而已，无论哪种请求方法，数据实际上都是通过TCP协议发送的，安全性没有任何不同；只是通过路径参数、查询字符串这种方式会让发送给服务器的数据暴露在浏览器地址栏而已，而请求体中的数据不会直接被看到，但是调试模式下是可以看到的；

            GET请求：
                1：GET方法向服务端发送数据只能通过查询字符串的方式发送，不能发送请求实体；
                    [HTTP协议并未做此限制，仅仅只是浏览器在具体实现HTTP协议GET方法时所设置的]

                2：GET方法向服务端发送数据时对查询字符串的长度有明确的限制；
                    [HTTP协议中并未对url长度以及请求实体大小做出限制，仅是服务器和浏览器出于防止恶意请求而做出的限制]

                3：GET方法向服务端发送数据时需要以查询字符串的方式发送，此时，发送的数据都将被看到，因此对于敏感数据，尽量避免使用GET方式通过浏览器发送给服务端；
                    [接口之间通信，由于通信双方均是服务端，因此使用GET方式则不会有上述隐私问题]
                
                4：安全，幂等，可缓存；

                5：通过GET方法向服务端发送数据时，对于非ASCII字符需要注意编码问题，避免乱码；

                6：由于GET方法在浏览器端的限制，导致GET方法无法上传文件；
            
            POST请求：
                1：POST方法向服务端发送数据时可以通过查询字符串发送，也可以通过请求实体发送；

                2：POST方法在请求实体中可以发送任何数据，包括二进制数据；因此通过POST方法可以通过请求实体发送文件至服务器;

                3：POST方法在发送请求体时，对于请求体的大小有限制，但是这个限制来自于浏览器以及服务器；
                    [HTTP协议并未对POST方法发送的请求体大小做出限制，仅仅是因为浏览器以及服务器防止恶意请求而添加的限制]
                
                4：POST方法通过请求实体发送数据时，不会显示在浏览器地址栏，因此数据的隐私性更好一些；
                    [无论是何种请求方法，发送数据并没有安全与不安全的区别，都是完全一样的，仅仅是POST方法的请求实体不会显示在地址栏，隐私性更好]
                
                5：POST方法发送请求时，请求实体如果为表单时必须选用：multiple/form-data
                    multiple/form-data和application/x-www-form-urlencode编码格式,如果没有文件上传时，两种编码格式都可以;
                    如果有文件上传时，只能使用multiple/form-data;
                    如果是发送字符串作为请求实体，则编码必须为:raw;
                    请求实体也可以是文件；
            
                1.语义不同；
                2.浏览器地址栏只能发送GET请求，不能直接发送POST请求，post请求需要通过脚本、工具等发送；
                3.发送数据的方式习惯不同；
                4.上传文件只能采用POST方式，并且需要指定编码格式为multiple/form-data；