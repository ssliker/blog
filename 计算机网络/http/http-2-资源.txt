HTTP协议中的资源：
    1：对于服务端的资源，可以是：图片、文本、声音、视频或者是可执行程序；而web客户端和服务端交互的本质在于通过HTTP协议对服务端的这些资源进行操作(如：获取、修改、删除、新增等)；、
    2：在对服务端资源进行操作之前需要找到目的资源；HTTP协议中通过统一资源标识符来唯一标识一个服务端资源；因此通过统一资源标识符即可定位到操作服务端资源；

统一资源标识符(URI)：
    1：统一资源标识符(Uniform Resource Identifiers)简称 URI；HTTP协议中使用 URI 来唯一标识一个资源；
    2：URI仅能唯一标识一个服务端资源，并不能定位到资源在服务端的位置，要定位资源在服务端位置有两种形式：URL(统一资源定位符)和URN(统一资源名)，实际中多用URL；
    3：通常URI被认为是URL的路径部分；

统一资源定位符(URL)：
    1：统一资源定位符是URI的子集，是URI的一种具体形式，不仅可以唯一标识一个服务端资源，而且包括该资源的详细信息，比如该资源所处的服务端地址、路径、名称等；目前也是最常用的服务端资源标识符；(用来标识并定位一个资源在服务端的位置)

    2：URL的格式：
        协议://用户名:密码@服务端地址(域名或者ip):端口/路径?查询字符串#片段：如下：
        scheme://user:pass@domain[ip]:port/path/?query_string#frag

        scheme： 
            协议:最常使用的即为HTTP协议，还有其他如 ftp 协议等；协议类必须和后面的部分使用 :// 隔开；
        user:pass：
            用户名和密码，用户名和密码之间需要使用:隔开，某些情况下服务器资源的操作需要进行用户认证，此时就需要传递用户名和密码；但是该项不是必须项，可以省略，常用在ftp协议中；
        domain[ip]:port：
            domain[ip]:资源所在的主机名称或者主机ip地址；port:指定资源需要通过服务端哪个端口访问；需要和主机域名或者主机ip部分使用 : 分隔开；端口部分不是必须项，因为web服务器默认端口是80端口，如果所需要访问的资源是通过服务器80端口访问，那么端口部分即可省略；
        path：
            资源在服务主机上的路径，使用 / 分隔开路径的各个部分，并使用 / 分割开路径部分主机端口号部分；
        query_string：
            查询字符串，在访问服务端资源时，需要向服务端发送的其他信息，查询字符串部分需要使用 ? 和路径部分分隔开；查询字符串本身由名称和值组成(key=value)，查询字符串的多个键值对需要使用 & 分隔开；该参数不是必须项，如果没有参数需要传递给服务端，则不需要携带；
        frag：
            片段，某些资源类型除过资源整体以外还可以进一步划分为更小的部分，通过片段参数即可定位到资源的局部；该参数一般使用在HTML资源中，用来定位到HTML文档的指定部分；携带该参数时，服务端并不会单独处理该片段部分，而是返回整个资源，由浏览器自己将文档定位至指定片段；该参数由浏览器使用；

    3：URL的编码问题：
        1：HTTP协议中规定，URL中只允许英文字母(a~zA~Z)、数字(0~9)、4个特殊字符(-_.~)以及保留字符(! * ' ( ) ; : @ & = + $ , / ? # [ ])(注意"不包括在内)可以无需编码即可使用；其余字符如果出现在URL中必须进行编码；

        2：由于HTTP协议并未规定应该按照何种编码格式编码URL中不被允许直接使用的字符，因此，不同的浏览器会针对不同的请求方式以及字符所处URL中位置的不同，进行不同的编码；因此为了避免不同的浏览器采用各种不同方式对URL编码导致服务端无法以合适的解码方式解码，推荐在发送请求之前尽量先进行编码，在收到请求之后进行解码；

        3：常见语言处理URL编码与解码：
            php:
                urlencode(url)    ：对URL进行编码
                urldecode(url)    ：对URL进行解码
            
            python:
                import urllib
                python3:
                    urllib.parse.quote(url)      ：对URL进行编码
                    urllib.parse.unquote(url)    ：对URL进行解码
                python2:
                    urllib.quote(url)       ：对URL进行编码
                    urllib.unquote(url)     ：对URL进行解码
            
            javascript:
                escape()函数：该函数在javascript最早的版本中就已经使用，可以用来对字符或者URL进行编码为unicode字符，编码时不包含ASCII字母(a~zA~Z)、数字(0~9)、特殊字符(@ * _ + - . /)
                unescape()函数：该函数可以对escape函数编码之后的内容进行解码；

                encodeURI()函数：真正用来对URI进行编码的函数，可以将字符或者URL编码为utf-8格式，并在前面加上%；编码时不包含ASCII字母(a~zA~Z)、数字(0~9)、特殊字符(@ * _ + - . / ; : , # $)
                decodeURI()函数：对encodeURI函数编码过的内容进行解码；

                encodeURIComponent()函数：功能和encodeURI函数相同，但是该函数可以对encodeURI不被编码的特殊字符(@ + / ; : , # $)进行编码但是(. - _)仍然不会被编码；
                decodeURIComponent()函数：对encodeURIComponent()函数编码过的内容进行解码；

                实际中常用encodeURI/decodeURI和encodeURIComponent/decodeURIComponent；两者区别在于前者不会编码保留字符，但是后者会编码保留字符；

统一资源名
    即根据资源的名称即可唯一确定一个网络资源，并且无需关注网络资源所在的位置；
