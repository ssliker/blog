1.端口：
    1.16位整数，最大取值65535
    2.0-1023为固定端口，被特殊应用使用
    2.1024-49151：登记端口
    4.49152-65535：动态端口；

2.tcp：
    1.tcp特点：
        1.面向连接的传输层通信协议，在发送数据之前需要先通过三次握手建立连接；之后需要通过四次握手释放连接
        2.提供消息的可靠交付服务、能够尽量保证消息的正确和可靠；(不丢失、不重复、不乱序、无差错)
        3.提供流量控制和拥塞控制功能。需要存储连接的健康状态、更消耗资源，但是能够避免消息丢失；
        4.tcp连接两端都设置有接收消息的缓存区和发送消息的缓存区；在发送数据时会先将消息添加至发送缓存区等待系统发送，接收消息时会从接收缓存区获取消息；该缓存是针对连接的， 不是端口；
        5.tcp是面向字节流的，tcp协议会将应用层消息分隔为若干个分组。
    2.tcp首部：
        1.tcp首部占用20个字节；
        2.结构如下：
            源端口 目的端口
            序号
            确认号
            数据偏移、保留字段 URG/ACK/PSH/RST/SYN/FIN 窗口
            检验和 紧急指针
            选型以及填充字段
        3.说明：
            1.源端口和目的端口：表示发送端端口和接收端端口
            2.序号：tcp会将应用层数据分隔为若刚分组，然后为分组加上序号，并且序号的迭代和分组的大小有关，301+100字节的数据，那么下个数据的序号就是401；
            3.确认号：确认号表示对确认号之前发送数据的确认，确认号是收到数据的序号加上数据的大小；
            4.数据偏移：表示数据巨离tcp报文首部的偏移量；(因为除过首部20个字节以外，还有一部分长度不定的字段)
            5.消息标识：
                URG：标识该消息时紧急消息，应该尽快交付给应用程序，无需放到发送缓冲区中；
                ACK：确认号的有效标识，ACK为1，那么表示确认号有效，ACK为0表示确认号无效；
                PSH：push的意思，即有消息就会立即发送，不会等到消息累计到一定大小之后才发送；
                RST:RESET的意思，即复位的意思，当RST为1时表示TCP连接出现严重差错，必须释放连接；
                SYN：表示用来建立一个连接；当SYN为1，ACK为0时表示该消息是一个连接请求报文，如果对方同意连接那么应该返回一个SYN=1和ACK为1
                FIN：用来释放一个连接，当FIN为1时，表示此报文段的发送方发送数据已完成，要求释放连接；
            6.窗口：用来表示接收方接收缓存的可用空间大小；
    3.tcp实现可靠传输的方式：
        1.分组：将消息进行分组。每一个分组都会添加一个tcp首部，
            1.在tcp首部中会设置该分组的序号，保证分组按序到达，避免乱序；
            2.在tcp首部还会有确认号机制，用来对收到的消息进行确认，如果超时未收到分组的确认号将会重发分组；
            3.通过滑动窗口的机制限制发往接受方的数据，基本逻辑就是判断未确认分组的字节数是否超过窗口的大小；没接受到一个分组的确认消息就将窗口向后滑动指定大小；窗口的大小不会固定不变，在通信过程中会动态调整窗口大小；
            3.tcp首部还有窗口字段，存储接收方接受缓存区大小，避免消息溢出导致消息丢失；
    4.tcp建立连接的过程：
        1.发送方发送SYN=1 ACK=0、seq=x的消息给接受方；
        2.接收方如果同意建立连接则回复一个SYN=1、ACK=1、seq=y、ack=x+1的消息(seq是消息序号、ack是确认号)
        3.发送法需要再回复一个ACK=1、seq=x+1，ack=y+1的数据
    5.tcp连接释放流程：
        1.请求释放方发送FIN=1、seq=u的消息给对方；
        2.b发送ACK=1、seq=v,ack=u+1的消息;此后a不能发送数据给b，但是b可以继续发送数据给a；
        3.b将数据发送完成之后，会向a发送一个FIN=1、ACK=1、seq=v、ack=u+1的消息，表示数据已经发送完成，可以断开连接；
        4.a需要回复给b同意端口连接的消息：ACK=1、seq=u+1、ack=v+1的消息
    6：一个tcp报文最大数据量为65495字节；因为tcp首部需要占用20个字节，ip首部需要占用20个字节，当tcp报文大小超过该大小之后，可以通过循环使用序号来继续传输；
    7.tcp首部存在一个长度不确定的字段，而udp没有，因为udp首部长度固定为8个字节，而tcp有一个可选项，这个可选项的长度并不固定；


3.udp：
    1.udp特点：
        1.udp提供最大努力交付，但不提供可靠交付服务，因此消息容易出现丢失、缺失等问题；
        2.udp是无连接的，发送数据之前无需建立连接通道，发送效率更高；
        3.udp不提供拥塞控制、流量控制、无需记录连接状态信息，使用的资源更少；实时性更高，但是当发送速度长期超过对端读取报文的速度会导致队列溢出和报文丢失；
        4.udp是面向报文的，udp协议不会对应用层传递下来的数据进行分组、也不会把收到的报文合并之后再交给应用程序；应用程序交给udp一个报文，udp就发送这个报文，udp收到一个报文就直接交付给应用程序；
        5.udp虽然是面向报文的，但是如果报文过大，在ip层也会分片；
        6.udp支持一对一、一对多、多对一、多对多的通信；
        7.udp的首部只有8个字节，相比TCP的20个字节要小很多，消息体更小，传输效率更高；
    2.udp首部：
        1.包括两部分：包含ip地址信息的伪首部和udp首部
        1.udp首部包括：源端口、目的端口、用户数据报长度、检验和差错检验码，每个字段都是2个字节；
        3.伪首部包括：源ip地址、目的ip地址、udp长度等；
    3.端口不对：丢弃消息。通过icmp返回给发送端一个端口不可达的错误信息；
    4.数据出错，丢弃消息；

6.7层网络拓扑结构:
    应用层、表示层、会话层、运输层、网络层、链路层、物理层
7.三次握手的必要性？
    三次握手主要有以下几个原因：
        1.是为了解决网络异常的情况，防止历史失效连接请求初始化了当前连接；
        2.除此之外还涉及到收发双发确认初始化序列号的作用，两次握手只能保证客户端发送的序列号被服务端确认，但是服务端发送过来的序列号是否被客户端确认不得而知；
        3.防止资源浪费，如果没有第三次确认，那么服务端是不清楚客户端到底和服务端建立了正常的连接，只能先自行维护一个客户端的连接信息，如果失效连接过多将会造成资源浪费；
    

