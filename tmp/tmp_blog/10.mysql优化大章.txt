1.库表结构设计优化：数据冷热、增删频率、业务特征
2.数据类型优化
3.字符编码优化
4.存储引擎优化
5.索引优化
6.查询缓存优化
7.sql语法优化

设计和优化思路：
    1.根据数据的业务特征和联系、数据的更新和查询频率特征、数据冷热特征归纳需要存放数据的表；
    2.根据数据当前规模以及未来的增长规模确定是否需要水平分表以及分表策略；
    3.设计具体表结构，确定数据字段类型、长度、字符编码；
    4.根据业务查询类型设计索引方案；
    5.调整mysql相关参数，提升sql执行效率；
    6.使用explain查看sql执行计划，针对sql执行计划进行优化；开启慢查询日志，优化特定sql；


关于数据类型的优化：
    1.尽量使用整数；
    2.尽量使用无符号整数；
    3.整数类型尽量要小；
    4.字符串能使用定长尽量使用定长；
    5.字符串必须限制长度，长度要尽可能小；
    6.TEXT和BLOB类型的数据要单独出表存储；
    7.IP地址需要转换为32为无符号整数存储；
    8.状态表示推荐使用TINYINT而非BOOL；
    9.字段必须非null；
    
关于字符编码的优化：
    1.数据库、数据表、字段、客户端、网络连接、查询结果的字符编码尽量要统一；避免出现乱码；

关于分页的优化：
    1.尽量使用where条件配合LIMIT实现分页；不要直接使用Limit分页

关于索引的优化：
    1.为需要的字段添加索引：
        1.where条件字段；
        1.高频查询内容；
        2.关联字段；
        3.排序字段；
        4.分组字段；
    2.选择合适的索引：
        1.能使用唯一索引的尽量使用唯一索引；
        2.字段内容较长时可以选择：前缀索引；
        3.通过联合索引来降低索引的冗余度，避免为过多字段设置索引；
    3.使用索引的方式要正确：
        1.避免在索引列上进行计算；
        2.索引顺序要正确；
        3.
