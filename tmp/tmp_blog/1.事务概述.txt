事务：
    1.事务是对一组操作执行方式的约束和要求，如果一组操作满足原子性、一致性、持久性、隔离性，那么就称这一组操作是一个事务；反之，如果一组操作是一个事务，那么这组操作将会具有原子性、持久性、隔离性、一致性；
    2.对于事务的四大特性而言，简称为A(Atomic原子性)C(Consistency一致性)I(Isolation隔离性)D(Duration持久性)，原子性、持久性、隔离性是一组操作构成事务的必备要素，而一致性则是事务具有的结果特性；
    3.事务通常用来实现业务上多个独立操作在逻辑上的一致性；比如单机环境中的跨表操作，分布式环境中的跨库操作；

事务的特性：ACID
    A(Atomicity)：原子性；
        这里的原子性是指：组成事务的一组操作要么全部成功，要么全部失败；
        事务的原子性和程序中指令的原子性有所不同，事务的原子性强调的是事务执行结果和构成事务的操作成功与否是否是一致的，而操作本身并不具备原子特征，组成事务的多个操作可以被打断，转而执行其他事务中的操作，只要保证事务能够一起成功一起失败即可；
        (和编程语言中的原子性有所不同，编程语言中的原子性强调的是操作本身的原子特征)

        对于事务原子性而言，全部成功是唯一的且期望中的情况，无需特殊处理；但是对于全部失败而言，需要将已经成功的操作进行回滚，因此需要额外的操作来实现，innodb中通过undolog反向记录sql来实现回滚操作；
    
    C(Consistency)：一致性；
        一致性是指：操作与结果的一致；无论事务是否执行成功，数据都必须符合数据库操作逻辑；一致性是对事务操作结果的要求；一致性由其他三个特性共同保证；

        这里的'一致'指的是数据库中数据值在事务发生前后逻辑的正确性，而不是数据在事务发生前后和谁相等；所谓的逻辑正确中的逻辑也仅仅只代表数据库相关操作的逻辑，并不代表业务的逻辑，数据库本身也无法去保证数据在业务中的逻辑正确性，业务中数据的一致性应该由业务保证；

    I(Isolation)：隔离性；
        1.隔离性是指：用来描述事务之间的隔离程度；

        2.之所以要有隔离性，是因为构成事务的操作本身不具有原子性，事务并发执行时，可能发生事务会被中断然后执行其他事务，导致一个事务可以看到其他已提交或者未提交事务对数据的修改，如果事务基于其他已提交或者未提交事务的修改进行后续操作，那么可能带来更新丢失、不可重复读、幻读等问题；所以需要将事务进行隔离；描述事务间隔离程度的特性就是隔离性；

        3.innodb中按照隔离程度不同，提供了四种隔离级别，分别是读未提交、读已提交、可重复读、串型执行；
        

    D(Duration)：持久性；
        1.持久性是指：一旦事务成功的执行完成，事务带来的修改结果就会持久的存在；
        2.之所以要有持久性，是因为数据一般都是在内存中修改，而内存在断电或者软件以及系统崩溃之后无法恢复，导致事务执行结果丢失，所以持久性要求事务的执行结果必须落入磁盘，永久存在；


事务类型：
    扁平事务：
        1.扁平事务是指组成一个事务的所有操作都在同一个层面，由BEGIN或者start transiaction开始，由ROLLBACK或者COMMIT结束，在BEGIN和ROLLBACK/COMMIT之间的操作要么全部成功，要么全部失败；扁平事务是最常用的本地事务类型；
        2.扁平事务的编程方式：
            #关闭自动提交-开启事务
            SET AUTOCOMMIT = 0;

            #执行sql
            INSERT INTO test(name,age) VALUES('tom',23);

            #提交或者回滚事务
            COMMIT; 提交事务
            ROLLBACK;回滚事务

    带保存点的扁平事务：
        1.此类事务本质上仍然是扁平事务，但是可以设置保存点，在回退时可以指定回退到哪一个保存点；但是回退到指定保存点之后事务并未结束，只是表示当前事务处于指定的保存点而已，要想结束事务还需要使用COMMIT或者ROLLBACK回滚整个事务；
        2.带保存点的扁平事务：
            #关闭自动提交-开启事务
            SET AUTOCOMMIT = 0;

            #执行sql1
            INSERT INTO test(name,age) VALUES('tom',23);

            #设置保存点1
            SAVEPOINT 1;

            #执行sql2
            INSERT INTO test(name,age) VALUES('tom',23);

            #设置保存点2
            SAVEPOINT 2;

            #回滚到保存点1，此时事务中的sql2将会被回退，但是sql1并不会，而且当前事务也并未结束；需要继续使用COMMIT提交事务或者使用ROLLBACK回退事务；
            ROLLBACK TO 1;

            #提交或者回滚事务
            COMMIT; 提交事务
            ROLLBACK;回滚事务；
    嵌套事务：
        由多层事务嵌套而成，事务最终的特性由传播特性而定；spring中定义了8中事务传播类型；
    分布式事务：
        分布式环境下的扁平事务；