1.关于RDB持久化：
    1.RDB持久化是redis提供的一种将内存中数据值本身全量持久化至磁盘的方式；
    2.将数据持久化至磁盘中，可避免在服务挂掉、机器挂掉之后数据丢失的问题，在redis服务恢复时能够从磁盘的持久化文件中读取数据自动加载至内存中；
    3.除过RDB这种持久化方式以外，redis还支持AOF的方式持久化，其中RDB持久化方式可以单独使用也可以和AOF的方式混合使用；

2.RDB触发方式：
    1.手动触发：
        1.客户端向服务端发起SAVE命令；
        2.客户端向服务端发起BGSAVE命令；

    2.自动触发：
        1.对redis中的数据在指定时间范围内达到指定修改次数，会触发BGSAVE命令；通常配置如下：
            save 900 1 //服务器在900秒之内，对数据库执行了至少1次修改
            save 300 10 //服务器在300秒之内，对数据库执行了至少10修改
            save 60 1000 //服务器在60秒之内，对数据库执行了至少1000修改
        2.在从节点连接主节点之后，会触发主节点执行BGSAVE命令；
        3.手动向服务端发送shutdown命令时会触发执行SAVE命令；

3.RDB持久化执行方式：
    1.SAVE方式执行：
        1.由当前主进程执行RDB持久化流程，在当前主进程执行RDB流程期间会阻塞所有客户端请求，直到流程执行完毕；
        2.在redis中只有手动向服务端发起SAVE命令或者SHUTDOWN命令时才会由主进程直接执行持久化流程；

    2.BGSAVE方式执行：
        1.由主进程fork一个子进程来执行RDB持久化流程，主进程只有在fork子进程时才会阻塞客户端请求，当fork完成子进程之后，主进程开始接收并处理客户端请求，由子进程开始处理持久化流程；
        2.redis采用'copy-on-write'技术实现子进程和主进程数据共享，通过'copy-on-write'技术，子进程首先会和主进程共享所有数据，并不会直接通过拷贝的方式创建数据快照，当客户端发起修改数据的请求时，才会将需要修改的数据复制一份为子进程；

    3.流程执行结果：
        子进程会将redis中所有的数据本身记录在磁盘的rdb文件中，即RDB是以全量记录的方式持久化数据；

4.RDB持久化相关的配置：
    1.持久化自动触发时机：
        save 900 1 //服务器在900秒之内，对数据库执行了至少1次修改
        save 300 10 //服务器在300秒之内，对数据库执行了至少10修改
        save 60 1000 //服务器在60秒之内，对数据库执行了至少1000修改        
    2.持久化文件名称：
        dbfilename dump.rdb //设置rdb文件名称；
    3.持久化文件所在目录：
        dir /redis/path/rdb //持久化文件保存路径；
    4：是否压缩rdb文件
        rdbcompression yes //选择是否压缩rdb文件；

5.自动触发BGSAVE的实现方式：
    1.首先redis中定义了一个结构体：
        struct saveparam {
            time_t seconds;    // 秒数
            int changes;    // 变更次数
        }
        该结构体用来保存配置文件中定义的触发BGSAVE的信息；
    2.redis还在redisServer中定义了两个字段来保存redis中key被修改的次数以及上次执行bgsave的时间：
        long long dirty;    // 上次成功执行save或者bgsave命令之后至现在key被变更的次数；
        time_t lastsave;    // unix时间戳，表示上次成功执行save或者bgsave命令时的时间；
        time_t rdb_save_time_last;  //最近一次执行BGSAVE的时间；
    
    3.除此之外，redis还在周期函数serverCron中检测dirty和lastsave是否满足BGSAVE的条件，如果达到BGSAVE条件则进入BGSAVE流程中；

6.BGSAVE大概流程：
    1.检测是否正在执行RDB持久化或者AOF持久化流程：
        1.如果有子进程正在执行RDB持久化流程，直接返回错误信息；
        2.如果正在执行AOF持久化流程，则查看是否有schedule参数：
            1.如果有该参数则将本次RDB持久化流程添加到定时事件中，等待定时事件就绪之后再执行；
            2.如果没有该参数，则直接返回错误信息；
            schedule参数的主要作用在于避免RDB和AOF冲突，造成数据的不一致；
        2.如果当前没有子进程正在执行RDB持久化也没有执行AOF持久化流程，则开始执行BGSAVE流程：
            1.备份当前脏键值(被修改的key的个数)，脏键值起着检测是否需要执行BGSAVE流程的作用，在每次执行BGSAVE完成后需要将脏键设置为0，重新计数，并且需要在当前BGSAVE流程失败之后恢复脏键的值；
            2.记录当前执行BGSAVE的时间，同样也是为了配置文件中的配置频率能够自动触发BGSAVE而设置的；
            3.开始fork子进程，如果fork成功，主进程继续响应客户端请求，子进程则开始执行SAVE流程：
                1.关闭子进程的套接字，子进程无需处理客户端请求；
                2.执行写文件操作，将内存中的数据写入rdb文件中：
                    1.创建临时文件，并以写的方式打开文件；如果打开失败则返回错误信息；
                    2.开始通过遍历的方式将所有数据库中的数据写入rdb文件；
                    3.刷新缓冲区，确保所有数据都落入磁盘；
                    4.通过cas的方式修改临时文件的名称为rdb文件名称；
                    
7.RDB文件格式：
    1.格式结构：|--REDIS标识(5字节)--|--redis版本号(4字节)--|--辅助信息--|--data数据--|--EOF(1字节)--|--校验和(8字节)--|
    2：RDB结构成员：
        1.RDB文件组织格式为：
            REDIS:db_version:database:EOF:check_sum
                REDIS：
                    大写的REDIS字符串，表示该文件是Redis的RDB文件，帮助Redis快速检测文件类型；大小为5个字节；
                db_version：
                    RDB文件版本号；大小为4个字节
                database：
                    数据库信息，包括数据号和数据库中存储的键值对，如果数据库中无数据，该值为0；如果有数据则按照database格式存储；
                EOF：
                    RDB文件结束符，标志RDB文件正文内容的结束，使用RDB文件恢复数据时，如果遇到该值说明所有的键值对都已经载入内存了；
                check_sum：
                    检测RDB文件是否有错误或者损坏，该值是根据REDIS、db_version、database、EOF四个部分的内容进行计算而出的；载入RDB文件时会将载入的数据计算得到的校验值和check_sum进行对比；大小为8个字节；
            
        2.database具体数据组织格式：
            SELECTDB:db_number:key_value_pairs
                SELECTDB：
                    数据库标识，常量，读取程序遇到该值时接下来的数据会被当做数据库号；
                db_number：
                    具体的数据库号；
                key_value_pairs：
                    保存该数据库中的所有的键值对；
            
        3.key_value_pairs键值对组织格式：
            EXPIRETIME_MS:ms:TYPE:key:value
                EXPIRETIME_MS：
                    表示键值对过期时间标识，遇到该值时接下来读取到的内容会被当做过期时间，以ms为单位；长度为1字节；
                ms：
                    具体的过期时间，8个字节大小
                Type：
                    value的数据类型；Redis中的数据类型之一，长度为1字节：
                Key：
                    键名
                value：
                    键值
8.RDB持久化方式优缺点：
    1.优点：
        1.RDB记录的是全量数据，因此非常适合进行数据备份；
        2.RDB采用子进程来执行持久化流程，执行效率较高；
        3.RDB文件中记录的是redis中所有数据的本身信息，在恢复数据时相比AOF效率更高；
    2.缺点：
        1.RDB因为是全量记录数据，并且需要fork子进程，属于重量级操作，无法做到实时或者近实时执行持久化流程；
        2.在redis或者机器挂掉之后，会丢失上次成功执行持久化之后至挂掉那一刻的所有数据；
        3.rdb是二进制文件，无法直接查看修改；
