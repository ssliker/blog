1.索引为何能够加快数据查找速度：
    1.索引中存储着索引值和数据在磁盘文件的记录，只要条件值匹配到索引即可立即确定数据在磁盘的位置，因此索引起着定位作用；
    2.索引数据相比数据记录本身要小很多，因为操作系统一次只能从磁盘中读取一个页的数据，在linux上一个页的大小在4KB，这个可以调整，但总归是一个固定值，在索引数据本身比较小的情况下，一次磁盘io可以读取更多的索引数据至内存中和条件值进行比较，索引数据较小保证了索引本身的查找效率较高；
    3.索引文件采用了合适的数据结构来映射为内容存储结构，在索引非常多的情况下，索引数据小的优势已经被削弱，查找相匹配的索引本身就已经需要较多次数的磁盘io，所以必须选择合适的数据结构来作为索引文件的存储结构，那么在数据结构中查找数据的步数就相当于磁盘io次数。innodb选择B+树作为索引文件的存储结构具有较高的查询效率，能够以很少的磁盘io次数找到相匹配的索引；
    总结起来就三点：
        1.索引起着定位作用，通过索引能够定位至数据在磁盘的位置；
        2.索引比较小，一次可读取较多的索引内容至内存中进行查找匹配；
        3.索引文件存储结构选择恰当，减少索引数据加载次数；

2.索引为何要选择B+树作为文件存储结构：
    1.选择一种数据结构作为索引文件的存储结构，标准就是在这种数据结构中查找数据的时间复杂度要低；原因在于选择一种数据结构作为文件存储结构之后，我们会以这种数据结构组织数据的方式来存储数据，在查找数据时也是安装在数据结构中查找数据的方式来读取数据，那么数据结构查找数据的步数就等价于磁盘io次数；
    2.常见的数据结构如：数组或者链表、二叉树、红黑树；
        1.数组或者链表：数组中获取一个元素的时间复杂度为O(1),但是查找一个和目标相匹配的元素时间复杂度是O(n),因为需要遍历整个数组来和目标值进行比较查找相匹配的元素，链表原理相同，因此并不合适；
        2.二叉树：二叉树查找元素的思想本质上是二分法的思想，但是二叉树一个节点只能存储一个元素，而且一个节点只能由两个分叉，树的高度会比较高，查找次数会较高，而且还有演化成链表的可能，因此并不合适；
        3.红黑树：红黑树不能作为索引文件存储结构的原因和二叉树相同，因为一个节点中只能存储一个元素，而且一个节点只能由两个分叉，导致树的高度较高，查找步骤较多，因此并不适合；
        4.哈希表：将哈希表作为索引文件的存储结构，通过对索引值进行hash运算来确定索引数据的存储位置确实能够大幅提升数据的查找速度，但是哈希表作为索引文件的存储结构将只能支持精确查找，不支持范围查找，不支持排序操作；