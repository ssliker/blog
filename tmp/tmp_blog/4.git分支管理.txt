1.关于分支：
    1.分支用来解决版本变化过程中的分歧；
    2.版本管理以分支为单位进行，每个分支有自己的版本流程；

2.分支管理：
    1.创建分支：
        1.新的分支以创建新分支时所处的分支为模板；
        2.命令：git branch 分支名称
    
    2.查看所有分支：
        1.显示当前仓库所有的分支
        2.命令：git branch
    
    3.切换分支：
        1.切换至其他分支：
        2.命令：在当前分支修改已提交之后切换：
                git checkout 分支名
                git switch 分支名
        

    4.创建并切换分支：
        1.以当前分支为模板，创建新的分支，并切换至新的分支
        2.命令：git checkout -b 分支名
               git switch -c 分支名
    
    5.删除分支：
        1.删除某一个分支
        2.删除一个已经合并过的分支：git branch -d 分支名
        3.删除一个还未合并过的分支：git branch -D 分支名

    6.保存现场，方便切换分支：
        1.git不允许在当前分支内容未提交之前切换至其他分支，在暂时无法提交时可以先保存现场，然后切换：
        2.命令：git stash
        3.特别注意：如果当前分支有新建文件，在保存现场之前必须先把当前分支新建的文件add至暂存区，否则git会把该新建文件当成master分支的文件，而不是当前分支的文件；
    
    7.恢复现场：
        1.恢复至执行git stash之前的现场：
        2.命令：
            1.查看现场保存记录：git stash list
            2.恢复但不删除：git stash apply
            3.恢复并删除：git stash pop
        
    8.局部合并：
        1.将另一个分支局部的修改合并至当前分支；
        2.命令：git cherry-pink commit_id
    
    9.合并分支：
        1.将其他分支的内容合并至当前分支：
        2.合并方式1：git merge -m '合并说明' 待合并分支
        3.合并方式2：git merge -m '合并说明' --no-ff 待合并分支
        4.合并方式1在删除待合并分支之后，合并信息就会丢失，但是合并方式2在删除合并分支之后合并信息也不会丢失；
    
    