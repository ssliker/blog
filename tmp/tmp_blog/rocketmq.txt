
消息类型：同步、异步、单向、延时消息
消息顺序：无序、局部有序、全局有序
事务消息：支持事务、不支持事务

消息队列使用中的问题：
    1.类型
    2.顺序
    3.事务
    4.消费模式
    5.可靠性
    6.性能


消息队列作用；
    1.解耦
    2.异步
    3.削峰

消息队列选型：  
    1.常见的消息队列：
        ActiveMQ、RocketMQ、RabbitMQ、Kafka

    2.消息队列的选型：
        从性能上来看，这几个消息队列的性能都已经足够；
        从事务支持程度上来看，kafka已经被排除。另外，Kafka设计之初的目的也是为了分布式日志服务的；
        其他三个从业务角度上来讲都是符合要求的，但是最终起决定性作用的是运维那边，因为目前旧的项目已经在使用RocketMQ了，不允许再给系统引入新的组件，所以最终选择了Rocketmq;
    3.选型关注点：
        1.从功能：消息类型、消息的有序性、事务消息、消费模式
        2.从使用：可靠性、性能、消息堆积、横向可扩展性
        3.从实现：开发语言，社区资料丰富程度

rocketmq模型：
    1.角色：
        发送者、接收者、broker-server、namesever
    2.大概工作流程：
        发送者->namesever->拉去可用的broker列表
        发送者选择topic所在broker，发送消息->broker；
        接受者->namesever->拉取可用的broker列表；
        接收者选择topic所在broker，从broker->拉取消息；
    3.关于相关概念：
        1.topic:
            1.rocketmq是一个基于主题的发布订阅模式的消息队列；因此rocketmq中的消息队列是基于topic主题来组织的；每一个topic下默认会创建4个消息队列；
            2.消息发送者发送消息时需要指定待发布的topic；消息接收者接收消息时也需要指定待订阅的topic；
            3.topic可以手动创建，也可以自动创建，通常测试环境都设置为自动创建，线上环境设置为手动创建；
        2.关于tag：
            1.消息的标识，消息发送方可以设置消息的tag，消息接收方可以根据消息的tag过滤消息；
        


rocketmq角色详解：
    1.namesever：
        1.功能：
            1.承担broker注册与发现功能；
            2.承担broker监控和故障下线功能；
            3.为消息发送者和消息接收者提供基于topic主题的broker节点信息；
        2.namesever部署结构：
            1.namesever以集群方式部署；保证namesever的高可用及较好的性能；
        3.namesever工作流程：
            1.broker节点在启动之后需要向某个namesever节点注册当前briker节点信息；
            2.namesever节点之间需要互相同步自己存储的broker节点信息；
            3.namesrv和broker节点保持长连接，并通过心跳检测连接状态，心跳间隔时间是30s，如果检测到broker节点已经下线，那么将会剔除broker节点；
            4.消息发送者在发送消息之前需要连接namesever，然后从namesever中拉取可用的broker列表，如果namesever检测到某个broker节点下线，也不会立即通知发送者该节点下线；
            5.消息接收者在接收消息之前也需要先连接namesever，然后从namesever拉取可用的broker列表；
        4.namesever启动流程：
            1.读取并加载配置文件，主要配置项如下：
                1.监听端口；
                2.线程池线程个数设置；(namesever内部采用了线程池隔离策略，对于处理消息发送、消息消费、心跳检测都可以使用不同的线程池来处理);
                3.网络通信相关参数：网络连接超时时间，网络发送和接收缓冲区大小，是否启用epoll模型等；
            2.创建nameserver实例，并初始化实例，并添加两个定时任务：
                1.每10s执行一次的定时任务：用来剔除已经下线的broker节点；
                2.每10分钟执行一次，用来打印kv配置选项；
            3.注册JVM钩子函数并启动服务器；之所以要注册JVM钩子函数，是因为namesever中使用了线程池，要保证namesever退出之后能够及时释放资源；
        5.namesever功能实现原理：
            1.namesever中存储相关信息：
                1.namesever中使用了5个HashMap来存储topic主题信息、broker节点信息、broker节点健康状态以及cluster集群信息和过滤信息等：
                    opicQueueTable：
                        存储topic主题和消息对列的对应关系，消息发送者以及消息接收者需要根据该列表查询topic对应的消息队列；
                    brokerAddrTable：
                        存储broker名称和broker基础信息：broker所属集群、broker主备类型，broker地址等；
                    clusterAddrTable：
                        存储集群名称和集群中broker节点的对应信息，即集群中包含的broker节点名称；
                    brokerLiveTable：
                        存储每一个broker节点的健康状态信息，每次broker节点响应nameserver的心跳请求之后都会修改这部分信息；
                    filterServerTable：
                        用于类模式的消息过滤；
            2.broker注册路由信息：
                1.broker注册路由信息是通过broker与namesever的心跳功能实现的；broker启动时会向namesrv集群中所有nsrv节点发送自己的信息；
                2.并且每隔30s，broker都会向nsrv发送心跳包，如果连续120s没有收到broker发送的心跳包，那么将会关闭与broker的连接；
                3.broker向nsrv发送心跳包时nsrv会更新存储broker节点的hashmap：包括
                    1.判断broker是否存在，不存在则添加broker信息并修改registerFirst字段；
                    2.判断集群是否存在，如果集群不存在那么会先创建集群，然后向集群信息中添加broker节点名称；
                    3.如果broker是master节点并且borker的topic发生变化或者初次注册，那么还会修改topic相关信息；
                    4.然后修改存储broker健康信息的hashmap，该集合中存储的信息将会作为剔除broker节点的依据；
            3.关于broker节点下线：
                1.broker每隔30s会向nsrv注册自己的信息，每次收到broker节点的信息之后都会更新存储broker节点心跳信息的集合，记录下本次收到心跳包的时间；
                2.在nsrv启动时还注册了一个每隔10s执行一次的定时任务，该定时任务执行时会检测集合中上一次broker节点发送心跳的时间和当前时间的间隔，如果120s都没有收到nsrv的心跳信息，那么将会判定该broker节点已经下线；
                3.在broker节点主动下线时，broker节点会向nsrv发送下线指令；此时nsrv也会剔除broker节点；
                4.移除时会移除所有集合中关于下线broker节点的信息；


            4.关于路由发现：
                1.broker节点的topic信息发生变化之后，nsrv并不会主动推送给消息发送者和消息接收者，而是由消息发送者和消息接收者定时拉取主题最新的路由信息；

    0.关于消息：
        1.消息是Message类型；
        2.在创建消息时必须设置topic、tags、消息体；也可以为消息设置属性；
        2.创建消息：
            new Message(tpoic,msg.getBytes())；
            new Message(tpoic,tags,msg.getBytes())；
            new Message(tpoic,tags,keys,msg.getBytes())；
        3.通过方法设置：
            msg.setTopic()  设置主题
            msg.setTags()   设置tag
            msg.setDelayTimeLevel()  设置延迟级别
            message.putUserProperty(key,value)； 设置属性

    1.关于消息发送：
        1.消息发送类型：
            1.同步消息：
                1.消息发送者需要等待消息发送结果，只有接收到消息发送结果之后才能继续向下执行；
                2.消息发送结果的返回的时间则跟消息的可靠性配置有关：
                    1.默认情况下broker节点在收到消息之后会立即返回消息发送结果；
                    2.如果配置了flushDiskType那么broker会在消息持久化到磁盘上之后才会返回；
                    3.如果配置了主从结构并且brokerRole参数设置为了SYNC_MASTER的话，在消息发送至从节点之后才会返回发送结果信息；
                3.代码实现：
                    SendResult sendResult = producer.send(msg);
            2.异步消息：
                1.消息发送完成之后不必等待消息结果，可以继续向下执行；但是需要设置回调函数接收消息发送结果；
                2.代码实现：需要为发送者设置监听器，监听发送结果：
                producer.send(msg,new SendCallback(){
                    onSuccess(SendResult sendResult){}
                    onException(Throwable throwable){}
                })
            3.单向消息：
                1.消息发送者不关注消息发送结果，消息发送之后可以立即向下继续执行，也不必设置回调函数；
                2.代码实现：sendOneway()
            4.事务消息：
                1.消息和本地操作具有事务关系；
                2.事务消息发送模型：
                    1.消息发送者发送消息，此时消息是一个半消息，处于无法被消费者消费的状态；
                    2.消息发送成功之后会通知监听器中的本地事务提交逻辑；本地事务执行完成之后需要根据事务提交成功与否返回状态：COMMIT_MESSAGE或者ROLLBACK_MESSAGE;
                    3.如果本地事务提交逻辑长时间未返回事务提交状态，消息队列会回查本地事务执行状态，需要在回查逻辑中返回COMMIT_MESSAGE、COMMIT_ROLLBACK、UNKNOW；
                    4.回查的频率以及最大次数可以在broker端设置：
                        brokerConfig.setTransactionCheckInterval(1000)；ms单位
                        brokerConfig.setTransactionCHeckMax(3);
                        在超过最大回查次数之后，消息队列将会自动执行COMMIT_ROLLBACK命令；
                3.代码实现：
                4.注意事项：
                    1.关于本地事务提交：
                        1.本地事务所有逻辑必须放在监听器的executeLocalTransaction中，不要自作聪明放在其他地方执行事务；这个方法只有broker返回SEND_OK时才会调用，一定能够保证事务和消息的一致性；
                    2.关于回查逻辑：
                        1.在本地事务中执行事务时也要记录下本次事务消息的事务id；可以通过message.getTransactionId获得；
                        2.回查时可以通过检测数据库中是否有本次事务消息的事务id确定事务是否执行成功；
                        3.如果消息中有能够确定事务的唯一id(orderId)也可以用该id作为回查条件；
                    3.关于回查逻辑中的返回值：
                        1.回查逻辑中如果没有检测到事务成功的信号，推荐返回UNKNOW，而不是COMMIT_ROLLBACK；以防事务暂时未执行成功，返回ROLLBACK之后本地事务又执行成功导致数据不一致；
            5.延迟消息：

        2.消息顺序控制：
            1.无序消息；
                1.消息发送者发送消息时按照负载均衡算法选择主题的某一个消息队列发送消息；
                2.默认状态下就是无序消息；
            2.局部有序消息；
                1.消息发送者将需要保证有序发送的消息按顺序发送至同一个消息队列；
                2.需要设置消息队列选择器，在消息队列选择器中选择要发送的目标队列：
                3.代码实现：
                   producer.send(msg,new MessageQueueSelector(){
                      MessageQueue select(List<MessageQueue> list,Message message,Object o){

                      }
                   },msgSelectTag)
                4.实现原理说明：
                    1.发送时需要先传递给消息队列选择器一个参数msgQueueTag，比如订单id等；
                    2.该参数会传递给select方法的o参数；
                    3.在select中可以根据o参数来选择一个消息队列返回；
                
            3.全局有序：
                1.消息发送者需要将所有的消息按顺序发送至topic下的同一个消息队列；
                2.代码实现：
                    producer.send(msg,new MessageQueueSelector(){
                      MessageQueue select(List<MessageQueue> list,Message message,Object o){

                      }
                   },msgSelectTag)
                3.实现原理说明：
                    1.发送时需要先传递给消息队列选择器一个参数msgQueueTag，比如订单id等；
                    2.该参数会传递给select方法的o参数；
                    3.在select中始终返回固定的消息队列即可；
        
        3.消息发送流程：
            1.发送流程如下：消息验证、查找路由、消息发送
            2.消息验证：
                1.检车发送者是否处于运行状态；
                2.检查消息长度是否符合规范；必须大于0，小于4M
                3.检测是否设置主题信息；
            3.查找路由：
                1.查找路由是指根据topic查找borker信息的过程；
                2.查找流程：
                    1.查找时会先检测消息生产者的缓存中查找topic对应的broker信息；
                    2.如果生产者中没有缓存该信息，那么回去nsrv中查找topic对应的broker信息；
                    3.如果nsrv中也没有topic的信息，那么会检测是否开启自动创建主题的配置是否配置为true；如果为true那么会自动创建topic，然后将topic对应的broker返回；
                    4.如果上述操作都未能成功执行，那么返回异常；
    
        4.关于消息消费：
            1.消费者按组分类，一个消费组可包含多个消费者；
            2.消费者在消费时必须订阅要消费的主题：
                consumer.subscribe(topic)  只订阅主题
                consumer.subscribe(topic,subExpression)   订阅主题和tag
            3.消费模式：
                1.支持广播模式和负载均衡模式；
                2.设置方式：
                    1.consumer.setMessageModel(MessageModel.BROADCASTING)
                    2.consumer.setMessageModel(MessageModel.CLUSTERING)
            4.消费者消费消息时可以对消息进行过滤，过滤方式有两种：
                1.通过订阅主题和tag进行过滤；
                2.通过消息属性进行过滤：consumer.subscribe("topic",MessageSelector.bySql())
            5.消息获取模式：
                1.推模式：由broker推送消息给消息消费者，但是对于Rocketmq而言，实际上并不存在真正的推模式，Rocketmq的推送模式本质上是封装了消息消费者的拉取模式，定时拉取信息而已；
                2.拉取模式，由消息消费者从broker中拉取信息进行消费，rocketmq默认情况下即为拉取模式；
                3.推模式和拉模式在创建消费者时指定：DefaultMQPushConsumer和DefaultMQPullConsumer；
                3.关于拉取模式和推送模式比较：
                    1.拉取模式下消费能力的自主性更强更可控，但是可能造成消息在broker端的积压，推送模式下消费能力不可控，可能造成消息在消费端的积压；
                    2.拉取模式下，broker无需关注当前在线的且具有消费能力的consumer，推送模式则需要关注当前哪些consumer在线，是否可以消费当前消息等；
            6.消息重复消费问题：
                1.发生重复消费的原因：
                    1.rocket采用的发送-确认机制，在发送消息之后，broker必须向生产者返回发送结果，如果超时之后仍然没有收到broker返回的发送结果，消息生产者会重复发送消息至broker；消费者消费时将会看到两个相同的消息，造成消息重复消费；

                    2.rocket对于消息消费仍然采用消费-确认机制，在消息消费之后，消息消费者必须向broker返回消息消费结果，如果返回消费失败或者消费过程中发生异常，或者超时没有收到消费者返回的消费状态，那么broker会暂存消息，间隔一定时间之后继续让消费者消费；如果消息消费者消费成功之后的步骤发生异常，或者网络异常导致broker未收到消费结果，那么之后还会再被消费一次；造成消息重复消费；

                    3.当broker、客户端重启、扩容、缩容时可能造成消息重复消费；


                2.处理消费幂等性：
                    1.所谓幂等性是指消息无论消费多少遍都只会有一个结果；
                    2.消息对列中保证消息幂等性的核心在于先检测后消费：在消费消息之前需要先检测是否有消息消费记录，如果有消息的消费记录，那么就表示已经消费过该消息，将不再消费；如果没有则消费消息；
                    3.具体做法：
                        1.消费消息时先检测消费记录，如果有将不再消费，如果无就继续消费；
                        2.消费完成之后必须添加消费记录，消费记录的添加和消息消费操作要具有事务特性，保证消息消费成功一定有消费记录，消息消费失败一定没有消费记录；
                        3.消费记录的实现通常也有两种做法：
                            1.添加单独的消费记录；
                            2.如果有特殊字段能够表示消费记录，也可以通过检测消费字段实现；
                3.消息重试：
                    1.发生消息重试的原因：
                        1.消息消费过程中发生异常；
                        2.消息消费者返回消息消费失败；
                        3.消息消费者消费消息之后未返回消费状态；
                        发生上述原因之后，rocketmq会暂存消息，然后间隔一定时间之后再次推送给消费者消费；
                    2.消息重试机制：
                        1.rocketmq提供消息重试机制，但是有重试频率和最大重试次数限制：
                            consumer.setMaxReconsumeTimes(3)   //消息最大重试次数，默认是16次；
                            consumer会间隔时间之后重新推送消息给消费者，间隔时间会逐步增加；
                        2.实际应用中，推荐在每次消费时检查消费次数，超过消费次数之后报警处理，避免消息长时间消费失败得不到处理；获取消费次数的接口：message.getReconsumeTimes()

                        3.在重试次数超过最大重试次数之后，消息将会成为死信消息，被放置在死信队列中；
                4.关于死信消息和死信队列：
                    1.关于死信消息：
                        1.消息消费重试次数已经超过了消费最大阈值，该消息将成为死信消息，不能再被消费者消费；
                        2.死信消息将会被移动至死信队列存储；
                        3.死信消息的有效期和普通消息的有效期相同，都是三天，如果三天还未消费那么将会删除；
                    2.关于死信队列：
                        1.一个死信队列和一个消息消费组对应而不是消息消费者对应；一个消费组下不同消费者产生的死信消息都将放到同一个死信队列中；
                        2.如果一个消息消费组下的所有消息消费者都没有产生死信消息的话，那么系统也不会为该消费组创建死信队列；
    3.消息的持久化：
        1.rocketmq采用文件来存储消息；broker节点收到消息时默认在buffer中存储着，可以通过配置flushDiskType选项来决定同步刷盘还是异步刷盘；
        2.rocketmq接收到消息刷盘之后会存储在CommitLog中；而且所有的消息无论是何种主题都会按顺序存储在文件中；CommitLog文件默认地址在store/commitlog下面；
        3.为了能够高效的按照topic检索消息，rocketmq除过存储CommitLog文件以外，还会存储一个consumeQueue文件，该文件存储在store/consumequeue/topic_name文件夹下；其按照主题分别存储在不同的位置，并按照不同的对列id作为具体的文件名，这样消息消费者即可按照不同的主题找到文件目录位置，按照不同的对列id找到不同的文件，文件内容中按顺序存储着消息在commitlog中的偏移量和大小，这样即可按照顺序在CommitLog中找到对应的消息；
        4.从消息持久化来看消息的可靠性保证：
            1.
    1.消息存储机制--消息发送高性能原因；
    2.消息堆积问题处理：


1.其他补充：
    1.关于消息消费：
        1.一个消息队列同一时刻只允许被一个消费者消费，但是一个消费者可以消费多个消息队列；
        2.消息重试是针对消费组的，而不是消费者，一个消费者启动时除了订阅自己显示订阅的主题以外还会自动订阅一个重试主题；
        3.如果消费类型是集群模式，那么消费进度保存在broker上，如果是广播模式，消息消费进度则保存在消费者端；
        4.消费者消费消息时默认是从主节点拉取消息的，当主节点繁忙时才会到从节点上拉取消息；而判断主节点是否繁忙的标准就是当前没有拉取到消费者端的消息是否长度超过了broker节点常驻内存的大小；
        5.消费者消费消息时会会根据topic查找到broker节点，然后根据broker节点的名称和id确定broker的通信地址；
    