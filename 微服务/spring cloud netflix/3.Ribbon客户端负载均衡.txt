1.关于负载均衡：
    1.负载均衡是指：从服务列表中按照某种策略选择其中一个服务来处理当前请求；
    2.负载均衡大体分类有两种：
        1.客户端负载均衡；
        2.服务端负载均衡；
    3.常见的负载均衡策略：
        1.轮询
        2.随机
        3.响应时间权重
2.关于Ribbon负载均衡：
    1.Ribbon是客户端负载均衡，即Ribbon是在客户端获取到所有可用的服务列表之后，然后按照策略从服务列表中选择一个服务发起请求；
    2.Ribbon同样提供了多种负载均衡算法，如轮询、随机等，也支持自定义负载均衡算法；

3.关于Ribbon的使用：
    1.通过注入LoadBalancerClient，然后调用其choose方法来选择一个服务；
    2.通过在Resttemplate上添加@LoadBalanced注解实现；
    3.通过Fegin实现，因为Fegin内嵌了ribbon；

4.自定义Ribbon策略：
    1.在启动类或者配置类中注入负载均衡策略对象即可，完成之后，所有的服务请求均使用该策略；
        @Bean
        public RandomRule getRandomRule() {
            return new RandomRule();
        }
    2.在配置文件中指定要使用的策略类：
        service-provider:
            ribbon:
                NFLoadBalancerRuleClassName:com.netflix.loadbalancer.RandomRule

5.Ribbon点对点直连服务：
    1.Ribbon点对点直连无需启动注册中心，可以通过在Ribbon中配置服务地址信息，Ribbon同样可以进行客户端负载均衡；
    2.Ribbon实现方式：
        1.当前服务无需再从注册中心拉去服务列表；因此需要注释掉eureka.instance.fetch-registry配置；
        2.为Ribbon配置服务提供者信息列表：
            service-provider:
                ribbon:
                    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule  # 实现负载均衡策略的类名，在点对点直连中可以不用配置；
                    listOfServers: http://服务提供者ip地址:服务提供者端口, http://服务提供者ip地址:服务提供者端口
            ribbon:
                eureka:
                    enabled: false  #  关闭Eureka 实现Ribbon点对点直连；

        
